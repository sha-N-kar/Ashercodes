
T6_Displlay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800490c  0800490c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  0800490c  0800490c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800490c  0800490c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08004914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000040  08004954  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004954  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f54  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe6  00000000  00000000  00029fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a64  00000000  00000000  0002d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8b2  00000000  00000000  00044ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000859c9  00000000  00000000  00051396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6d5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002220  00000000  00000000  000d6db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08004494 	.word	0x08004494

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08004494 	.word	0x08004494

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <Glcd>:
		0x00, 0x3C, 0x42, 0x81, 0x81, 0x00,
		0x00, 0x81, 0x81, 0x42, 0x3C, 0x00
};

void Glcd(char rs,char data)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
	if(rs==1)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d105      	bne.n	8000686 <Glcd+0x22>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000680:	4834      	ldr	r0, [pc, #208]	; (8000754 <Glcd+0xf0>)
 8000682:	f003 f82c 	bl	80036de <HAL_GPIO_WritePin>
	if(rs==0)
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <Glcd+0x34>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000692:	4830      	ldr	r0, [pc, #192]	; (8000754 <Glcd+0xf0>)
 8000694:	f003 f823 	bl	80036de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, (data & 0x01));
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	2101      	movs	r1, #1
 80006a4:	482c      	ldr	r0, [pc, #176]	; (8000758 <Glcd+0xf4>)
 80006a6:	f003 f81a 	bl	80036de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, (data & 0x02));
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	f003 0302 	and.w	r3, r3, #2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	2102      	movs	r1, #2
 80006b6:	4828      	ldr	r0, [pc, #160]	; (8000758 <Glcd+0xf4>)
 80006b8:	f003 f811 	bl	80036de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (data & 0x04));
 80006bc:	79bb      	ldrb	r3, [r7, #6]
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	2104      	movs	r1, #4
 80006c8:	4823      	ldr	r0, [pc, #140]	; (8000758 <Glcd+0xf4>)
 80006ca:	f003 f808 	bl	80036de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (data & 0x08));
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	2108      	movs	r1, #8
 80006da:	481f      	ldr	r0, [pc, #124]	; (8000758 <Glcd+0xf4>)
 80006dc:	f002 ffff 	bl	80036de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (data & 0x10));
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	f003 0310 	and.w	r3, r3, #16
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	2110      	movs	r1, #16
 80006ec:	481a      	ldr	r0, [pc, #104]	; (8000758 <Glcd+0xf4>)
 80006ee:	f002 fff6 	bl	80036de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (data & 0x20));
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	461a      	mov	r2, r3
 80006fc:	2120      	movs	r1, #32
 80006fe:	4816      	ldr	r0, [pc, #88]	; (8000758 <Glcd+0xf4>)
 8000700:	f002 ffed 	bl	80036de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (data & 0x40));
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	4811      	ldr	r0, [pc, #68]	; (8000758 <Glcd+0xf4>)
 8000712:	f002 ffe4 	bl	80036de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, (data & 0x80));
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <Glcd+0xf4>)
 8000724:	f002 ffdb 	bl	80036de <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	4809      	ldr	r0, [pc, #36]	; (8000754 <Glcd+0xf0>)
 8000730:	f002 ffd5 	bl	80036de <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f002 f85d 	bl	80027f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <Glcd+0xf0>)
 8000742:	f002 ffcc 	bl	80036de <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f002 f854 	bl	80027f4 <HAL_Delay>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40011000 	.word	0x40011000
 8000758:	40010800 	.word	0x40010800

0800075c <LCD_Init>:

void LCD_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	Glcd(0, 0x3F);
 8000760:	213f      	movs	r1, #63	; 0x3f
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff ff7e 	bl	8000664 <Glcd>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <Clear>:

void Clear(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 8000772:	2201      	movs	r2, #1
 8000774:	2102      	movs	r1, #2
 8000776:	4817      	ldr	r0, [pc, #92]	; (80007d4 <Clear+0x68>)
 8000778:	f002 ffb1 	bl	80036de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000782:	4815      	ldr	r0, [pc, #84]	; (80007d8 <Clear+0x6c>)
 8000784:	f002 ffab 	bl	80036de <HAL_GPIO_WritePin>
	for(char row=0;row<8;row++)
 8000788:	2300      	movs	r3, #0
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	e019      	b.n	80007c2 <Clear+0x56>
	{
		Glcd(0,0xB8+row);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	3b48      	subs	r3, #72	; 0x48
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4619      	mov	r1, r3
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff ff64 	bl	8000664 <Glcd>
		Glcd(0, 0x40);
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ff60 	bl	8000664 <Glcd>
		char s1=64;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	71bb      	strb	r3, [r7, #6]
		while(s1--)
 80007a8:	e003      	b.n	80007b2 <Clear+0x46>
			Glcd(1, 0x00);
 80007aa:	2100      	movs	r1, #0
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff ff59 	bl	8000664 <Glcd>
		while(s1--)
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	1e5a      	subs	r2, r3, #1
 80007b6:	71ba      	strb	r2, [r7, #6]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f6      	bne.n	80007aa <Clear+0x3e>
	for(char row=0;row<8;row++)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3301      	adds	r3, #1
 80007c0:	71fb      	strb	r3, [r7, #7]
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b07      	cmp	r3, #7
 80007c6:	d9e2      	bls.n	800078e <Clear+0x22>
	}
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	40011000 	.word	0x40011000

080007dc <SetCursor>:

void SetCursor(char sector,char x_axis,char y_axis)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	460b      	mov	r3, r1
 80007e8:	71bb      	strb	r3, [r7, #6]
 80007ea:	4613      	mov	r3, r2
 80007ec:	717b      	strb	r3, [r7, #5]
	if(sector==0)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d10b      	bne.n	800080c <SetCursor+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fa:	4817      	ldr	r0, [pc, #92]	; (8000858 <SetCursor+0x7c>)
 80007fc:	f002 ff6f 	bl	80036de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000800:	2201      	movs	r2, #1
 8000802:	2102      	movs	r1, #2
 8000804:	4815      	ldr	r0, [pc, #84]	; (800085c <SetCursor+0x80>)
 8000806:	f002 ff6a 	bl	80036de <HAL_GPIO_WritePin>
 800080a:	e00d      	b.n	8000828 <SetCursor+0x4c>
	}
	else if(sector==1)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d10a      	bne.n	8000828 <SetCursor+0x4c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2102      	movs	r1, #2
 8000816:	4811      	ldr	r0, [pc, #68]	; (800085c <SetCursor+0x80>)
 8000818:	f002 ff61 	bl	80036de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <SetCursor+0x7c>)
 8000824:	f002 ff5b 	bl	80036de <HAL_GPIO_WritePin>
	}
	Glcd(0, x_axis+0xB8);
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	3b48      	subs	r3, #72	; 0x48
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4619      	mov	r1, r3
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ff17 	bl	8000664 <Glcd>
	Glcd(0, y_axis+0x40);
 8000836:	797b      	ldrb	r3, [r7, #5]
 8000838:	3340      	adds	r3, #64	; 0x40
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4619      	mov	r1, r3
 800083e:	2000      	movs	r0, #0
 8000840:	f7ff ff10 	bl	8000664 <Glcd>
	lcd_count=y_axis;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <SetCursor+0x84>)
 8000846:	797b      	ldrb	r3, [r7, #5]
 8000848:	7013      	strb	r3, [r2, #0]
	axis=x_axis;
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <SetCursor+0x88>)
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	7013      	strb	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40011000 	.word	0x40011000
 800085c:	40010c00 	.word	0x40010c00
 8000860:	2000005c 	.word	0x2000005c
 8000864:	2000005d 	.word	0x2000005d

08000868 <loop>:

void loop(const char *data)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	for(short int loop = 0; loop < 6; loop++)
 8000870:	2300      	movs	r3, #0
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e093      	b.n	800099e <loop+0x136>
	{
		if(lcd_count==64)
 8000876:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <loop+0x14c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b40      	cmp	r3, #64	; 0x40
 800087c:	d116      	bne.n	80008ac <loop+0x44>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2102      	movs	r1, #2
 8000882:	484d      	ldr	r0, [pc, #308]	; (80009b8 <loop+0x150>)
 8000884:	f002 ff2b 	bl	80036de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088e:	484b      	ldr	r0, [pc, #300]	; (80009bc <loop+0x154>)
 8000890:	f002 ff25 	bl	80036de <HAL_GPIO_WritePin>
			Glcd(0,0xB8+axis);
 8000894:	4b4a      	ldr	r3, [pc, #296]	; (80009c0 <loop+0x158>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3b48      	subs	r3, #72	; 0x48
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4619      	mov	r1, r3
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fee0 	bl	8000664 <Glcd>
			Glcd(0,0x40);
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fedc 	bl	8000664 <Glcd>
		}
		if(lcd_count==128)
 80008ac:	4b41      	ldr	r3, [pc, #260]	; (80009b4 <loop+0x14c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b80      	cmp	r3, #128	; 0x80
 80008b2:	d102      	bne.n	80008ba <loop+0x52>
			lcd_count=0;
 80008b4:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <loop+0x14c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
		if(invert==0)
 80008ba:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <loop+0x15c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d109      	bne.n	80008d6 <loop+0x6e>
			Glcd(1, (*(data+loop)));
 80008c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff fec8 	bl	8000664 <Glcd>
 80008d4:	e00a      	b.n	80008ec <loop+0x84>
		else
			Glcd(1, ~(*(data+loop)));
 80008d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	43db      	mvns	r3, r3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	2001      	movs	r0, #1
 80008e8:	f7ff febc 	bl	8000664 <Glcd>
		lcd_count++;
 80008ec:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <loop+0x14c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <loop+0x14c>)
 80008f6:	701a      	strb	r2, [r3, #0]
		if(test==0 && Button_Down_Result && Button_Move)
 80008f8:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <loop+0x160>)
 80008fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d111      	bne.n	8000926 <loop+0xbe>
 8000902:	2120      	movs	r1, #32
 8000904:	482c      	ldr	r0, [pc, #176]	; (80009b8 <loop+0x150>)
 8000906:	f002 fed3 	bl	80036b0 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00a      	beq.n	8000926 <loop+0xbe>
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4829      	ldr	r0, [pc, #164]	; (80009b8 <loop+0x150>)
 8000914:	f002 fecc 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <loop+0xbe>
				Menu=6;
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <loop+0x164>)
 8000920:	2206      	movs	r2, #6
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e035      	b.n	8000992 <loop+0x12a>
		else if(Button_Menu_Esc)
 8000926:	2108      	movs	r1, #8
 8000928:	4823      	ldr	r0, [pc, #140]	; (80009b8 <loop+0x150>)
 800092a:	f002 fec1 	bl	80036b0 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d003      	beq.n	800093c <loop+0xd4>
			Menu=1;
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <loop+0x164>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e02a      	b.n	8000992 <loop+0x12a>
		else if(Button_Test_Enter)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	481e      	ldr	r0, [pc, #120]	; (80009b8 <loop+0x150>)
 8000940:	f002 feb6 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <loop+0xea>
			Menu=2;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <loop+0x164>)
 800094c:	2202      	movs	r2, #2
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e01f      	b.n	8000992 <loop+0x12a>
		else if(Button_Down_Result)
 8000952:	2120      	movs	r1, #32
 8000954:	4818      	ldr	r0, [pc, #96]	; (80009b8 <loop+0x150>)
 8000956:	f002 feab 	bl	80036b0 <HAL_GPIO_ReadPin>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d003      	beq.n	8000968 <loop+0x100>
			Menu=3;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <loop+0x164>)
 8000962:	2203      	movs	r2, #3
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e014      	b.n	8000992 <loop+0x12a>
		else if(Button_UP_Delete)
 8000968:	2110      	movs	r1, #16
 800096a:	4813      	ldr	r0, [pc, #76]	; (80009b8 <loop+0x150>)
 800096c:	f002 fea0 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <loop+0x116>
			Menu=4;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <loop+0x164>)
 8000978:	2204      	movs	r2, #4
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e009      	b.n	8000992 <loop+0x12a>
		else if(Button_Move)
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <loop+0x150>)
 8000982:	f002 fe95 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <loop+0x12a>
			Menu=5;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <loop+0x164>)
 800098e:	2205      	movs	r2, #5
 8000990:	701a      	strb	r2, [r3, #0]
	for(short int loop = 0; loop < 6; loop++)
 8000992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000996:	b29b      	uxth	r3, r3
 8000998:	3301      	adds	r3, #1
 800099a:	b29b      	uxth	r3, r3
 800099c:	81fb      	strh	r3, [r7, #14]
 800099e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	f77f af67 	ble.w	8000876 <loop+0xe>
	}

}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000005c 	.word	0x2000005c
 80009b8:	40010c00 	.word	0x40010c00
 80009bc:	40011000 	.word	0x40011000
 80009c0:	2000005d 	.word	0x2000005d
 80009c4:	20000075 	.word	0x20000075
 80009c8:	20000078 	.word	0x20000078
 80009cc:	20000077 	.word	0x20000077

080009d0 <Print>:

void Print(const char *data)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	while(*data)
 80009d8:	e086      	b.n	8000ae8 <Print+0x118>
		{
			if(*data >= 'A' && *data <= 'Z')
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b40      	cmp	r3, #64	; 0x40
 80009e0:	d912      	bls.n	8000a08 <Print+0x38>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b5a      	cmp	r3, #90	; 0x5a
 80009e8:	d80e      	bhi.n	8000a08 <Print+0x38>
				loop( &c_letter[(*data - 'A')*6]);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <Print+0x12c>)
 80009fe:	4413      	add	r3, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff31 	bl	8000868 <loop>
 8000a06:	e06c      	b.n	8000ae2 <Print+0x112>

			else if(*data >= 'a' && *data <= 'z')
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b60      	cmp	r3, #96	; 0x60
 8000a0e:	d912      	bls.n	8000a36 <Print+0x66>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b7a      	cmp	r3, #122	; 0x7a
 8000a16:	d80e      	bhi.n	8000a36 <Print+0x66>
				loop( &s_letter[(*data - 'a')*6]);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <Print+0x130>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff1a 	bl	8000868 <loop>
 8000a34:	e055      	b.n	8000ae2 <Print+0x112>

			else if(*data >= '0' && *data <= '9')
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b2f      	cmp	r3, #47	; 0x2f
 8000a3c:	d912      	bls.n	8000a64 <Print+0x94>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b39      	cmp	r3, #57	; 0x39
 8000a44:	d80e      	bhi.n	8000a64 <Print+0x94>
				loop( &number[(*data - '0')*6]);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <Print+0x134>)
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff03 	bl	8000868 <loop>
 8000a62:	e03e      	b.n	8000ae2 <Print+0x112>

			else if(*data == ' ')
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d103      	bne.n	8000a74 <Print+0xa4>
				loop( &Symbol[0]);
 8000a6c:	4826      	ldr	r0, [pc, #152]	; (8000b08 <Print+0x138>)
 8000a6e:	f7ff fefb 	bl	8000868 <loop>
 8000a72:	e036      	b.n	8000ae2 <Print+0x112>

			else if(*data == '.')
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b2e      	cmp	r3, #46	; 0x2e
 8000a7a:	d103      	bne.n	8000a84 <Print+0xb4>
				loop( &Symbol[1*6]);
 8000a7c:	4823      	ldr	r0, [pc, #140]	; (8000b0c <Print+0x13c>)
 8000a7e:	f7ff fef3 	bl	8000868 <loop>
 8000a82:	e02e      	b.n	8000ae2 <Print+0x112>

			else if(*data == ':')
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b3a      	cmp	r3, #58	; 0x3a
 8000a8a:	d103      	bne.n	8000a94 <Print+0xc4>
				loop( &Symbol[2*6]);
 8000a8c:	4820      	ldr	r0, [pc, #128]	; (8000b10 <Print+0x140>)
 8000a8e:	f7ff feeb 	bl	8000868 <loop>
 8000a92:	e026      	b.n	8000ae2 <Print+0x112>

			else if(*data == '/')
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b2f      	cmp	r3, #47	; 0x2f
 8000a9a:	d103      	bne.n	8000aa4 <Print+0xd4>
				loop( &Symbol[3*6]);
 8000a9c:	481d      	ldr	r0, [pc, #116]	; (8000b14 <Print+0x144>)
 8000a9e:	f7ff fee3 	bl	8000868 <loop>
 8000aa2:	e01e      	b.n	8000ae2 <Print+0x112>

			else if(*data == '-')
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b2d      	cmp	r3, #45	; 0x2d
 8000aaa:	d103      	bne.n	8000ab4 <Print+0xe4>
				loop( &Symbol[4*6]);
 8000aac:	481a      	ldr	r0, [pc, #104]	; (8000b18 <Print+0x148>)
 8000aae:	f7ff fedb 	bl	8000868 <loop>
 8000ab2:	e016      	b.n	8000ae2 <Print+0x112>

			else if(*data == '%')
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b25      	cmp	r3, #37	; 0x25
 8000aba:	d103      	bne.n	8000ac4 <Print+0xf4>
				loop( &Symbol[6*6]);
 8000abc:	4817      	ldr	r0, [pc, #92]	; (8000b1c <Print+0x14c>)
 8000abe:	f7ff fed3 	bl	8000868 <loop>
 8000ac2:	e00e      	b.n	8000ae2 <Print+0x112>

			else if(*data == '(')
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b28      	cmp	r3, #40	; 0x28
 8000aca:	d103      	bne.n	8000ad4 <Print+0x104>
				loop( &Symbol[7*6]);
 8000acc:	4814      	ldr	r0, [pc, #80]	; (8000b20 <Print+0x150>)
 8000ace:	f7ff fecb 	bl	8000868 <loop>
 8000ad2:	e006      	b.n	8000ae2 <Print+0x112>

			else if(*data == ')')
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b29      	cmp	r3, #41	; 0x29
 8000ada:	d102      	bne.n	8000ae2 <Print+0x112>
				loop( &Symbol[8*6]);
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <Print+0x154>)
 8000ade:	f7ff fec3 	bl	8000868 <loop>
			data++;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
	while(*data)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f47f af74 	bne.w	80009da <Print+0xa>
		}
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	080047bc 	.word	0x080047bc
 8000b00:	08004720 	.word	0x08004720
 8000b04:	08004858 	.word	0x08004858
 8000b08:	08004894 	.word	0x08004894
 8000b0c:	0800489a 	.word	0x0800489a
 8000b10:	080048a0 	.word	0x080048a0
 8000b14:	080048a6 	.word	0x080048a6
 8000b18:	080048ac 	.word	0x080048ac
 8000b1c:	080048b8 	.word	0x080048b8
 8000b20:	080048be 	.word	0x080048be
 8000b24:	080048c4 	.word	0x080048c4

08000b28 <Power>:

int Power(char times)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	int value=1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
	while(times--)
 8000b36:	e005      	b.n	8000b44 <Power+0x1c>
		value*=10;
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
	while(times--)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	71fa      	strb	r2, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f4      	bne.n	8000b38 <Power+0x10>
	return value;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <Number>:

void Number(float value,char point)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
	int data=0,tens=1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
	char digit=0,index=0,temp=point,c_value[10];
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
 8000b74:	2300      	movs	r3, #0
 8000b76:	75bb      	strb	r3, [r7, #22]
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	757b      	strb	r3, [r7, #21]

	data = (int)value;
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fd4b 	bl	8000618 <__aeabi_f2iz>
 8000b82:	4603      	mov	r3, r0
 8000b84:	61fb      	str	r3, [r7, #28]
	while(data >= tens)
 8000b86:	e008      	b.n	8000b9a <Number+0x3e>
		{
			digit++;
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	75fb      	strb	r3, [r7, #23]
			tens*=10;
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
	while(data >= tens)
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	daf2      	bge.n	8000b88 <Number+0x2c>
		}
	tens=1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]

	for(;digit>=2;digit--)
 8000ba6:	e020      	b.n	8000bea <Number+0x8e>
	{
		tens=Power(digit-1);
 8000ba8:	7dfb      	ldrb	r3, [r7, #23]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ffba 	bl	8000b28 <Power>
 8000bb4:	61b8      	str	r0, [r7, #24]
		c_value[index++] = ((data/tens) + 48);
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	7dbb      	ldrb	r3, [r7, #22]
 8000bc2:	1c59      	adds	r1, r3, #1
 8000bc4:	75b9      	strb	r1, [r7, #22]
 8000bc6:	3230      	adds	r2, #48	; 0x30
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	3320      	adds	r3, #32
 8000bcc:	443b      	add	r3, r7
 8000bce:	f803 2c18 	strb.w	r2, [r3, #-24]
		data%=tens;
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	fb93 f2f2 	sdiv	r2, r3, r2
 8000bda:	69b9      	ldr	r1, [r7, #24]
 8000bdc:	fb01 f202 	mul.w	r2, r1, r2
 8000be0:	1a9b      	subs	r3, r3, r2
 8000be2:	61fb      	str	r3, [r7, #28]
	for(;digit>=2;digit--)
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d8db      	bhi.n	8000ba8 <Number+0x4c>
	}
	c_value[index++] = ((data%10) + 48);
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <Number+0x168>)
 8000bf4:	fb83 1302 	smull	r1, r3, r3, r2
 8000bf8:	1099      	asrs	r1, r3, #2
 8000bfa:	17d3      	asrs	r3, r2, #31
 8000bfc:	1ac9      	subs	r1, r1, r3
 8000bfe:	460b      	mov	r3, r1
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	1ad1      	subs	r1, r2, r3
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	7dbb      	ldrb	r3, [r7, #22]
 8000c0c:	1c59      	adds	r1, r3, #1
 8000c0e:	75b9      	strb	r1, [r7, #22]
 8000c10:	3230      	adds	r2, #48	; 0x30
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	3320      	adds	r3, #32
 8000c16:	443b      	add	r3, r7
 8000c18:	f803 2c18 	strb.w	r2, [r3, #-24]

	if(point & 15)
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d034      	beq.n	8000c90 <Number+0x134>
	{
		c_value[index++]='.';
 8000c26:	7dbb      	ldrb	r3, [r7, #22]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	75ba      	strb	r2, [r7, #22]
 8000c2c:	3320      	adds	r3, #32
 8000c2e:	443b      	add	r3, r7
 8000c30:	222e      	movs	r2, #46	; 0x2e
 8000c32:	f803 2c18 	strb.w	r2, [r3, #-24]
		point&=~(16);
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	f023 0310 	bic.w	r3, r3, #16
 8000c3c:	70fb      	strb	r3, [r7, #3]
		while(point--)
 8000c3e:	e022      	b.n	8000c86 <Number+0x12a>
			{
				data=(int)value;
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fce9 	bl	8000618 <__aeabi_f2iz>
 8000c46:	4603      	mov	r3, r0
 8000c48:	61fb      	str	r3, [r7, #28]
				value=value-(float)data;
 8000c4a:	69f8      	ldr	r0, [r7, #28]
 8000c4c:	f7ff fb40 	bl	80002d0 <__aeabi_i2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4619      	mov	r1, r3
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fa85 	bl	8000164 <__aeabi_fsub>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	607b      	str	r3, [r7, #4]
				value=(value*(float)10.0);
 8000c5e:	491a      	ldr	r1, [pc, #104]	; (8000cc8 <Number+0x16c>)
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fb89 	bl	8000378 <__aeabi_fmul>
 8000c66:	4603      	mov	r3, r0
 8000c68:	607b      	str	r3, [r7, #4]
				c_value[index++]=(48+(int)value);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fcd4 	bl	8000618 <__aeabi_f2iz>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	7dbb      	ldrb	r3, [r7, #22]
 8000c76:	1c59      	adds	r1, r3, #1
 8000c78:	75b9      	strb	r1, [r7, #22]
 8000c7a:	3230      	adds	r2, #48	; 0x30
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	3320      	adds	r3, #32
 8000c80:	443b      	add	r3, r7
 8000c82:	f803 2c18 	strb.w	r2, [r3, #-24]
		while(point--)
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	70fa      	strb	r2, [r7, #3]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1d7      	bne.n	8000c40 <Number+0xe4>
			}
	}
	c_value[index] = '\0';
 8000c90:	7dbb      	ldrb	r3, [r7, #22]
 8000c92:	3320      	adds	r3, #32
 8000c94:	443b      	add	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	f803 2c18 	strb.w	r2, [r3, #-24]
	if((temp & 0xf0)==16)
 8000c9c:	7d7b      	ldrb	r3, [r7, #21]
 8000c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d105      	bne.n	8000cb2 <Number+0x156>
		string(c_value);
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fac8 	bl	8002240 <string>
	else
		Print(c_value);
}
 8000cb0:	e004      	b.n	8000cbc <Number+0x160>
		Print(c_value);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fe8a 	bl	80009d0 <Print>
}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	66666667 	.word	0x66666667
 8000cc8:	41200000 	.word	0x41200000

08000ccc <Move>:

void Move(char move,char str1[],char str2[])
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	73fb      	strb	r3, [r7, #15]
	if((move&1)==0)
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d123      	bne.n	8000d2c <Move+0x60>
	{
		invert=1;
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <Move+0xc0>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
		SetCursor(0, 7, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2107      	movs	r1, #7
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fd74 	bl	80007dc <SetCursor>
		Print(str1);
 8000cf4:	68b8      	ldr	r0, [r7, #8]
 8000cf6:	f7ff fe6b 	bl	80009d0 <Print>
		invert=0;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <Move+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
		SetCursor(1, 7, 64-(strlen(str2)*6));
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fa23 	bl	800014c <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	0052      	lsls	r2, r2, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	2107      	movs	r1, #7
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff fd5c 	bl	80007dc <SetCursor>
		Print(str2);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fe53 	bl	80009d0 <Print>
 8000d2a:	e027      	b.n	8000d7c <Move+0xb0>
	}
	else if((move&1)==1)
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d022      	beq.n	8000d7c <Move+0xb0>
	{
		SetCursor(0, 7, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2107      	movs	r1, #7
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fd4e 	bl	80007dc <SetCursor>
		Print(str1);
 8000d40:	68b8      	ldr	r0, [r7, #8]
 8000d42:	f7ff fe45 	bl	80009d0 <Print>
		invert=1;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <Move+0xc0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		SetCursor(1, 7, 64-(strlen(str2)*6));
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff f9fd 	bl	800014c <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	0052      	lsls	r2, r2, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	2107      	movs	r1, #7
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fd36 	bl	80007dc <SetCursor>
		Print(str2);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe2d 	bl	80009d0 <Print>
		invert=0;
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <Move+0xc0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
	}
	Menu=0;
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <Move+0xc4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000075 	.word	0x20000075
 8000d90:	20000077 	.word	0x20000077

08000d94 <Cursor>:
void Cursor(char sector,char x_axis,char y_axis)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	71bb      	strb	r3, [r7, #6]
 8000da2:	4613      	mov	r3, r2
 8000da4:	717b      	strb	r3, [r7, #5]
	if(!Menu)
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <Cursor+0x5c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10b      	bne.n	8000dc6 <Cursor+0x32>
	{
		SetCursor(sector, x_axis, y_axis);
 8000dae:	797a      	ldrb	r2, [r7, #5]
 8000db0:	79b9      	ldrb	r1, [r7, #6]
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fd11 	bl	80007dc <SetCursor>
		loop( &Symbol[5*6]);
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <Cursor+0x60>)
 8000dbc:	f7ff fd54 	bl	8000868 <loop>
		HAL_Delay(5);
 8000dc0:	2005      	movs	r0, #5
 8000dc2:	f001 fd17 	bl	80027f4 <HAL_Delay>
	}
	SetCursor(sector, x_axis, y_axis);
 8000dc6:	797a      	ldrb	r2, [r7, #5]
 8000dc8:	79b9      	ldrb	r1, [r7, #6]
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fd05 	bl	80007dc <SetCursor>
	loop( &Symbol[0]);
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <Cursor+0x64>)
 8000dd4:	f7ff fd48 	bl	8000868 <loop>
	if(!Menu)
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <Cursor+0x5c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <Cursor+0x52>
		HAL_Delay(5);
 8000de0:	2005      	movs	r0, #5
 8000de2:	f001 fd07 	bl	80027f4 <HAL_Delay>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000077 	.word	0x20000077
 8000df4:	080048b2 	.word	0x080048b2
 8000df8:	08004894 	.word	0x08004894

08000dfc <lot>:
void lot(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	char count=0,value=48,sector=0,y_axis=52;
 8000e02:	2300      	movs	r3, #0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	2330      	movs	r3, #48	; 0x30
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	717b      	strb	r3, [r7, #5]
 8000e0e:	2334      	movs	r3, #52	; 0x34
 8000e10:	713b      	strb	r3, [r7, #4]
	SetCursor(0, 2, 52);
 8000e12:	2234      	movs	r2, #52	; 0x34
 8000e14:	2102      	movs	r1, #2
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fce0 	bl	80007dc <SetCursor>
	Print("        ");
 8000e1c:	48a4      	ldr	r0, [pc, #656]	; (80010b0 <lot+0x2b4>)
 8000e1e:	f7ff fdd7 	bl	80009d0 <Print>
	SetCursor(0, 6, 5);
 8000e22:	2205      	movs	r2, #5
 8000e24:	2106      	movs	r1, #6
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fcd8 	bl	80007dc <SetCursor>
	Print("    ENTER  LOT    ");
 8000e2c:	48a1      	ldr	r0, [pc, #644]	; (80010b4 <lot+0x2b8>)
 8000e2e:	f7ff fdcf 	bl	80009d0 <Print>
	SetCursor(0, 2, 52);
 8000e32:	2234      	movs	r2, #52	; 0x34
 8000e34:	2102      	movs	r1, #2
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fcd0 	bl	80007dc <SetCursor>
	Print("0");
 8000e3c:	489e      	ldr	r0, [pc, #632]	; (80010b8 <lot+0x2bc>)
 8000e3e:	f7ff fdc7 	bl	80009d0 <Print>
	Menu=0;
 8000e42:	4b9e      	ldr	r3, [pc, #632]	; (80010bc <lot+0x2c0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(Button_Move || Menu==5)
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	489d      	ldr	r0, [pc, #628]	; (80010c0 <lot+0x2c4>)
 8000e4c:	f002 fc30 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d103      	bne.n	8000e5e <lot+0x62>
 8000e56:	4b99      	ldr	r3, [pc, #612]	; (80010bc <lot+0x2c0>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d145      	bne.n	8000eea <lot+0xee>
		{
			pos++;
 8000e5e:	4b99      	ldr	r3, [pc, #612]	; (80010c4 <lot+0x2c8>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b97      	ldr	r3, [pc, #604]	; (80010c4 <lot+0x2c8>)
 8000e68:	701a      	strb	r2, [r3, #0]
			while(Button_Move);
 8000e6a:	bf00      	nop
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	4894      	ldr	r0, [pc, #592]	; (80010c0 <lot+0x2c4>)
 8000e70:	f002 fc1e 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f8      	bne.n	8000e6c <lot+0x70>

			if(pos==8)
 8000e7a:	4b92      	ldr	r3, [pc, #584]	; (80010c4 <lot+0x2c8>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d102      	bne.n	8000e88 <lot+0x8c>
				pos=0;
 8000e82:	4b90      	ldr	r3, [pc, #576]	; (80010c4 <lot+0x2c8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
			if(pos<2)
 8000e88:	4b8e      	ldr	r3, [pc, #568]	; (80010c4 <lot+0x2c8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d80b      	bhi.n	8000ea8 <lot+0xac>
			{
				sector=0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	717b      	strb	r3, [r7, #5]
				y_axis=52+(pos*6);
 8000e94:	4b8b      	ldr	r3, [pc, #556]	; (80010c4 <lot+0x2c8>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	3334      	adds	r3, #52	; 0x34
 8000ea4:	713b      	strb	r3, [r7, #4]
 8000ea6:	e00a      	b.n	8000ebe <lot+0xc2>
			}
			else
			{
				sector=1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	717b      	strb	r3, [r7, #5]
				y_axis=(pos-2)*6;
 8000eac:	4b85      	ldr	r3, [pc, #532]	; (80010c4 <lot+0x2c8>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	0052      	lsls	r2, r2, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3b0c      	subs	r3, #12
 8000ebc:	713b      	strb	r3, [r7, #4]
			}
			SetCursor(sector, 2, y_axis);
 8000ebe:	793a      	ldrb	r2, [r7, #4]
 8000ec0:	797b      	ldrb	r3, [r7, #5]
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fc89 	bl	80007dc <SetCursor>
			Print("0");
 8000eca:	487b      	ldr	r0, [pc, #492]	; (80010b8 <lot+0x2bc>)
 8000ecc:	f7ff fd80 	bl	80009d0 <Print>
			Menu=Lot[pos]=count=0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <lot+0x2c8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	497b      	ldr	r1, [pc, #492]	; (80010c8 <lot+0x2cc>)
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	54ca      	strb	r2, [r1, r3]
 8000ede:	4a7a      	ldr	r2, [pc, #488]	; (80010c8 <lot+0x2cc>)
 8000ee0:	5cd2      	ldrb	r2, [r2, r3]
 8000ee2:	4b76      	ldr	r3, [pc, #472]	; (80010bc <lot+0x2c0>)
 8000ee4:	701a      	strb	r2, [r3, #0]
			value=48;
 8000ee6:	2330      	movs	r3, #48	; 0x30
 8000ee8:	71bb      	strb	r3, [r7, #6]
		}
		Cursor(sector,3,y_axis);
 8000eea:	793a      	ldrb	r2, [r7, #4]
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	2103      	movs	r1, #3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff4f 	bl	8000d94 <Cursor>
		if(Button_UP_Delete || Menu==4)
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4871      	ldr	r0, [pc, #452]	; (80010c0 <lot+0x2c4>)
 8000efa:	f002 fbd9 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <lot+0x110>
 8000f04:	4b6d      	ldr	r3, [pc, #436]	; (80010bc <lot+0x2c0>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d148      	bne.n	8000f9e <lot+0x1a2>
		{
			Menu=0;
 8000f0c:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <lot+0x2c0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
			while(Button_UP_Delete);
 8000f12:	bf00      	nop
 8000f14:	2110      	movs	r1, #16
 8000f16:	486a      	ldr	r0, [pc, #424]	; (80010c0 <lot+0x2c4>)
 8000f18:	f002 fbca 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f8      	bne.n	8000f14 <lot+0x118>
			SetCursor(sector, 2, y_axis);
 8000f22:	793a      	ldrb	r2, [r7, #4]
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	2102      	movs	r1, #2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fc57 	bl	80007dc <SetCursor>

			if(count==37)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b25      	cmp	r3, #37	; 0x25
 8000f32:	d101      	bne.n	8000f38 <lot+0x13c>
				count=0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	71fb      	strb	r3, [r7, #7]

			count++;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	71fb      	strb	r3, [r7, #7]
			if(count<10)
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b09      	cmp	r3, #9
 8000f42:	d80b      	bhi.n	8000f5c <lot+0x160>
				loop(&number[count*6]);
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <lot+0x2d0>)
 8000f52:	4413      	add	r3, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fc87 	bl	8000868 <loop>
 8000f5a:	e012      	b.n	8000f82 <lot+0x186>
			else if(count>9 && count < 37)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b09      	cmp	r3, #9
 8000f60:	d90f      	bls.n	8000f82 <lot+0x186>
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b24      	cmp	r3, #36	; 0x24
 8000f66:	d80c      	bhi.n	8000f82 <lot+0x186>
				loop(&c_letter[(count-10)*6]);
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f1a3 020a 	sub.w	r2, r3, #10
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <lot+0x2d4>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fc73 	bl	8000868 <loop>

			if(value==57)
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	2b39      	cmp	r3, #57	; 0x39
 8000f86:	d102      	bne.n	8000f8e <lot+0x192>
				value=64;
 8000f88:	2340      	movs	r3, #64	; 0x40
 8000f8a:	71bb      	strb	r3, [r7, #6]
 8000f8c:	e004      	b.n	8000f98 <lot+0x19c>
			else if(value==90)
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	2b5a      	cmp	r3, #90	; 0x5a
 8000f92:	d101      	bne.n	8000f98 <lot+0x19c>
				value=47;
 8000f94:	232f      	movs	r3, #47	; 0x2f
 8000f96:	71bb      	strb	r3, [r7, #6]
			value++;
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	71bb      	strb	r3, [r7, #6]
		}

		if(Button_Down_Result || Menu==3)
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	4847      	ldr	r0, [pc, #284]	; (80010c0 <lot+0x2c4>)
 8000fa2:	f002 fb85 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d103      	bne.n	8000fb4 <lot+0x1b8>
 8000fac:	4b43      	ldr	r3, [pc, #268]	; (80010bc <lot+0x2c0>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d148      	bne.n	8001046 <lot+0x24a>
		{
			while(Button_Down_Result);
 8000fb4:	bf00      	nop
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	4841      	ldr	r0, [pc, #260]	; (80010c0 <lot+0x2c4>)
 8000fba:	f002 fb79 	bl	80036b0 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f8      	bne.n	8000fb6 <lot+0x1ba>
			SetCursor(sector, 2, y_axis);
 8000fc4:	793a      	ldrb	r2, [r7, #4]
 8000fc6:	797b      	ldrb	r3, [r7, #5]
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fc06 	bl	80007dc <SetCursor>
			if(count==0)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <lot+0x1de>
				count=36;
 8000fd6:	2324      	movs	r3, #36	; 0x24
 8000fd8:	71fb      	strb	r3, [r7, #7]

			count--;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	71fb      	strb	r3, [r7, #7]
			if(count>9 && count < 37)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b09      	cmp	r3, #9
 8000fe4:	d910      	bls.n	8001008 <lot+0x20c>
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b24      	cmp	r3, #36	; 0x24
 8000fea:	d80d      	bhi.n	8001008 <lot+0x20c>
				loop(&c_letter[(count-10)*6]);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f1a3 020a 	sub.w	r2, r3, #10
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <lot+0x2d4>)
 8000ffe:	4413      	add	r3, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fc31 	bl	8000868 <loop>
 8001006:	e00d      	b.n	8001024 <lot+0x228>
			else if(count<10)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b09      	cmp	r3, #9
 800100c:	d80a      	bhi.n	8001024 <lot+0x228>
				loop(&number[count*6]);
 800100e:	79fa      	ldrb	r2, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	461a      	mov	r2, r3
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <lot+0x2d0>)
 800101c:	4413      	add	r3, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fc22 	bl	8000868 <loop>
			if(value==48)
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	2b30      	cmp	r3, #48	; 0x30
 8001028:	d102      	bne.n	8001030 <lot+0x234>
				value=91;
 800102a:	235b      	movs	r3, #91	; 0x5b
 800102c:	71bb      	strb	r3, [r7, #6]
 800102e:	e004      	b.n	800103a <lot+0x23e>
			else if(value==65)
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	2b41      	cmp	r3, #65	; 0x41
 8001034:	d101      	bne.n	800103a <lot+0x23e>
				value=58;
 8001036:	233a      	movs	r3, #58	; 0x3a
 8001038:	71bb      	strb	r3, [r7, #6]
			value--;
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	3b01      	subs	r3, #1
 800103e:	71bb      	strb	r3, [r7, #6]
			Menu=0;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <lot+0x2c0>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
		}
		Lot[pos]=value;
 8001046:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <lot+0x2c8>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4619      	mov	r1, r3
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <lot+0x2cc>)
 800104e:	79bb      	ldrb	r3, [r7, #6]
 8001050:	5453      	strb	r3, [r2, r1]
		if(Button_Test_Enter || Menu==2)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	481a      	ldr	r0, [pc, #104]	; (80010c0 <lot+0x2c4>)
 8001056:	f002 fb2b 	bl	80036b0 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d103      	bne.n	8001068 <lot+0x26c>
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <lot+0x2c0>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d10d      	bne.n	8001084 <lot+0x288>
		{
			Lot[pos+1]='\0';
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <lot+0x2c8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <lot+0x2cc>)
 8001070:	2100      	movs	r1, #0
 8001072:	54d1      	strb	r1, [r2, r3]
			Menu=pos=0;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <lot+0x2c8>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <lot+0x2c8>)
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <lot+0x2c0>)
 8001080:	701a      	strb	r2, [r3, #0]
			break;
 8001082:	e011      	b.n	80010a8 <lot+0x2ac>
		}
		if(Button_Menu_Esc || Menu==1)
 8001084:	2108      	movs	r1, #8
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <lot+0x2c4>)
 8001088:	f002 fb12 	bl	80036b0 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d104      	bne.n	800109c <lot+0x2a0>
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <lot+0x2c0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	f47f aed6 	bne.w	8000e48 <lot+0x4c>
		{
			Lot[0]='\0';
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <lot+0x2cc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
			Menu=0;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <lot+0x2c0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	080044ac 	.word	0x080044ac
 80010b4:	080044b8 	.word	0x080044b8
 80010b8:	080044cc 	.word	0x080044cc
 80010bc:	20000077 	.word	0x20000077
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	20000076 	.word	0x20000076
 80010c8:	20000000 	.word	0x20000000
 80010cc:	08004858 	.word	0x08004858
 80010d0:	080047bc 	.word	0x080047bc

080010d4 <Name>:
void Name()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	char count=0,value=32,len=strlen(name),sector=0,y_axis=0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	2320      	movs	r3, #32
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	489f      	ldr	r0, [pc, #636]	; (8001360 <Name+0x28c>)
 80010e4:	f7ff f832 	bl	800014c <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	70fb      	strb	r3, [r7, #3]
 80010ec:	2300      	movs	r3, #0
 80010ee:	717b      	strb	r3, [r7, #5]
 80010f0:	2300      	movs	r3, #0
 80010f2:	713b      	strb	r3, [r7, #4]
	SetCursor(0, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fb6f 	bl	80007dc <SetCursor>
	Print("                     ");
 80010fe:	4899      	ldr	r0, [pc, #612]	; (8001364 <Name+0x290>)
 8001100:	f7ff fc66 	bl	80009d0 <Print>
	Menu=pos=0;
 8001104:	4b98      	ldr	r3, [pc, #608]	; (8001368 <Name+0x294>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	4b97      	ldr	r3, [pc, #604]	; (8001368 <Name+0x294>)
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	4b97      	ldr	r3, [pc, #604]	; (800136c <Name+0x298>)
 8001110:	701a      	strb	r2, [r3, #0]
	SetCursor(0, 6, 5);
 8001112:	2205      	movs	r2, #5
 8001114:	2106      	movs	r1, #6
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fb60 	bl	80007dc <SetCursor>
	Print("    ENTER  NAME   ");
 800111c:	4894      	ldr	r0, [pc, #592]	; (8001370 <Name+0x29c>)
 800111e:	f7ff fc57 	bl	80009d0 <Print>
	while(1)
	{
		if(Button_Move || Menu==5)
 8001122:	2140      	movs	r1, #64	; 0x40
 8001124:	4893      	ldr	r0, [pc, #588]	; (8001374 <Name+0x2a0>)
 8001126:	f002 fac3 	bl	80036b0 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d103      	bne.n	8001138 <Name+0x64>
 8001130:	4b8e      	ldr	r3, [pc, #568]	; (800136c <Name+0x298>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b05      	cmp	r3, #5
 8001136:	d13a      	bne.n	80011ae <Name+0xda>
		{
			while(Button_Move);
 8001138:	bf00      	nop
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	488d      	ldr	r0, [pc, #564]	; (8001374 <Name+0x2a0>)
 800113e:	f002 fab7 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f8      	bne.n	800113a <Name+0x66>
			pos++;
 8001148:	4b87      	ldr	r3, [pc, #540]	; (8001368 <Name+0x294>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b85      	ldr	r3, [pc, #532]	; (8001368 <Name+0x294>)
 8001152:	701a      	strb	r2, [r3, #0]
			if(pos==20)
 8001154:	4b84      	ldr	r3, [pc, #528]	; (8001368 <Name+0x294>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b14      	cmp	r3, #20
 800115a:	d102      	bne.n	8001162 <Name+0x8e>
				pos=0;
 800115c:	4b82      	ldr	r3, [pc, #520]	; (8001368 <Name+0x294>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
			if(pos<11)
 8001162:	4b81      	ldr	r3, [pc, #516]	; (8001368 <Name+0x294>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b0a      	cmp	r3, #10
 8001168:	d809      	bhi.n	800117e <Name+0xaa>
			{
				sector=0;
 800116a:	2300      	movs	r3, #0
 800116c:	717b      	strb	r3, [r7, #5]
				y_axis=pos*6;
 800116e:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <Name+0x294>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	0052      	lsls	r2, r2, #1
 8001176:	4413      	add	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	713b      	strb	r3, [r7, #4]
 800117c:	e00a      	b.n	8001194 <Name+0xc0>
			}
			else
			{
				sector=1;
 800117e:	2301      	movs	r3, #1
 8001180:	717b      	strb	r3, [r7, #5]
				y_axis=((pos-11)*6)+2;
 8001182:	4b79      	ldr	r3, [pc, #484]	; (8001368 <Name+0x294>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	0052      	lsls	r2, r2, #1
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3b40      	subs	r3, #64	; 0x40
 8001192:	713b      	strb	r3, [r7, #4]
			}

			Lot[pos]=32;
 8001194:	4b74      	ldr	r3, [pc, #464]	; (8001368 <Name+0x294>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b77      	ldr	r3, [pc, #476]	; (8001378 <Name+0x2a4>)
 800119c:	2120      	movs	r1, #32
 800119e:	5499      	strb	r1, [r3, r2]
			Menu=count=0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	4a71      	ldr	r2, [pc, #452]	; (800136c <Name+0x298>)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	7013      	strb	r3, [r2, #0]
			value=32;
 80011aa:	2320      	movs	r3, #32
 80011ac:	71bb      	strb	r3, [r7, #6]

		}
		Cursor(sector,1,y_axis);
 80011ae:	793a      	ldrb	r2, [r7, #4]
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fded 	bl	8000d94 <Cursor>
		if(Button_UP_Delete || Menu==4)
 80011ba:	2110      	movs	r1, #16
 80011bc:	486d      	ldr	r0, [pc, #436]	; (8001374 <Name+0x2a0>)
 80011be:	f002 fa77 	bl	80036b0 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d103      	bne.n	80011d0 <Name+0xfc>
 80011c8:	4b68      	ldr	r3, [pc, #416]	; (800136c <Name+0x298>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d13f      	bne.n	8001250 <Name+0x17c>
		{
			while(Button_UP_Delete);
 80011d0:	bf00      	nop
 80011d2:	2110      	movs	r1, #16
 80011d4:	4867      	ldr	r0, [pc, #412]	; (8001374 <Name+0x2a0>)
 80011d6:	f002 fa6b 	bl	80036b0 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f8      	bne.n	80011d2 <Name+0xfe>
			SetCursor(sector, 0, y_axis);
 80011e0:	793a      	ldrb	r2, [r7, #4]
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff faf8 	bl	80007dc <SetCursor>

			if(count==26)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b1a      	cmp	r3, #26
 80011f0:	d101      	bne.n	80011f6 <Name+0x122>
				count=-1;
 80011f2:	23ff      	movs	r3, #255	; 0xff
 80011f4:	71fb      	strb	r3, [r7, #7]

			count++;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	3301      	adds	r3, #1
 80011fa:	71fb      	strb	r3, [r7, #7]
			if(count==0)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <Name+0x136>
				loop(&Symbol[0]);
 8001202:	485e      	ldr	r0, [pc, #376]	; (800137c <Name+0x2a8>)
 8001204:	f7ff fb30 	bl	8000868 <loop>
 8001208:	e011      	b.n	800122e <Name+0x15a>
			else if(count>0 && count <= 26)
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00e      	beq.n	800122e <Name+0x15a>
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b1a      	cmp	r3, #26
 8001214:	d80b      	bhi.n	800122e <Name+0x15a>
				loop(&c_letter[(count-1)*6]);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	461a      	mov	r2, r3
 8001224:	4b56      	ldr	r3, [pc, #344]	; (8001380 <Name+0x2ac>)
 8001226:	4413      	add	r3, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fb1d 	bl	8000868 <loop>

			value++;
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	3301      	adds	r3, #1
 8001232:	71bb      	strb	r3, [r7, #6]
			if(value==33)
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	2b21      	cmp	r3, #33	; 0x21
 8001238:	d102      	bne.n	8001240 <Name+0x16c>
				value=65;
 800123a:	2341      	movs	r3, #65	; 0x41
 800123c:	71bb      	strb	r3, [r7, #6]
 800123e:	e004      	b.n	800124a <Name+0x176>
			else if(value==91)
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	2b5b      	cmp	r3, #91	; 0x5b
 8001244:	d101      	bne.n	800124a <Name+0x176>
				value=32;
 8001246:	2320      	movs	r3, #32
 8001248:	71bb      	strb	r3, [r7, #6]
			Menu=0;
 800124a:	4b48      	ldr	r3, [pc, #288]	; (800136c <Name+0x298>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
		}

		if(Button_Down_Result || Menu==3)
 8001250:	2120      	movs	r1, #32
 8001252:	4848      	ldr	r0, [pc, #288]	; (8001374 <Name+0x2a0>)
 8001254:	f002 fa2c 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <Name+0x192>
 800125e:	4b43      	ldr	r3, [pc, #268]	; (800136c <Name+0x298>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d13f      	bne.n	80012e6 <Name+0x212>
		{
			while(Button_Down_Result);
 8001266:	bf00      	nop
 8001268:	2120      	movs	r1, #32
 800126a:	4842      	ldr	r0, [pc, #264]	; (8001374 <Name+0x2a0>)
 800126c:	f002 fa20 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f8      	bne.n	8001268 <Name+0x194>
			SetCursor(sector, 0, y_axis);
 8001276:	793a      	ldrb	r2, [r7, #4]
 8001278:	797b      	ldrb	r3, [r7, #5]
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff faad 	bl	80007dc <SetCursor>

			if(count==0)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <Name+0x1b8>
				count=27;
 8001288:	231b      	movs	r3, #27
 800128a:	71fb      	strb	r3, [r7, #7]

			count--;
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	3b01      	subs	r3, #1
 8001290:	71fb      	strb	r3, [r7, #7]
			if(count>0 && count < 27)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00f      	beq.n	80012b8 <Name+0x1e4>
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b1a      	cmp	r3, #26
 800129c:	d80c      	bhi.n	80012b8 <Name+0x1e4>
				loop(&c_letter[(count-1)*6]);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b34      	ldr	r3, [pc, #208]	; (8001380 <Name+0x2ac>)
 80012ae:	4413      	add	r3, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fad9 	bl	8000868 <loop>
 80012b6:	e005      	b.n	80012c4 <Name+0x1f0>
			else if(count==0)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <Name+0x1f0>
				loop(&Symbol[0]);
 80012be:	482f      	ldr	r0, [pc, #188]	; (800137c <Name+0x2a8>)
 80012c0:	f7ff fad2 	bl	8000868 <loop>

			value--;
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	71bb      	strb	r3, [r7, #6]
			if(value==31)
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	2b1f      	cmp	r3, #31
 80012ce:	d102      	bne.n	80012d6 <Name+0x202>
				value=90;
 80012d0:	235a      	movs	r3, #90	; 0x5a
 80012d2:	71bb      	strb	r3, [r7, #6]
 80012d4:	e004      	b.n	80012e0 <Name+0x20c>
			else if(value==64)
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	2b40      	cmp	r3, #64	; 0x40
 80012da:	d101      	bne.n	80012e0 <Name+0x20c>
				value=32;
 80012dc:	2320      	movs	r3, #32
 80012de:	71bb      	strb	r3, [r7, #6]
			Menu=0;
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <Name+0x298>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
		}
		name[pos]=value;
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <Name+0x294>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <Name+0x28c>)
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	5453      	strb	r3, [r2, r1]
		if(Button_Test_Enter || Menu==2)
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	481f      	ldr	r0, [pc, #124]	; (8001374 <Name+0x2a0>)
 80012f6:	f002 f9db 	bl	80036b0 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <Name+0x234>
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <Name+0x298>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d10d      	bne.n	8001324 <Name+0x250>
		{
			// EEPROM write
			name[pos+1]='\0';
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <Name+0x294>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a14      	ldr	r2, [pc, #80]	; (8001360 <Name+0x28c>)
 8001310:	2100      	movs	r1, #0
 8001312:	54d1      	strb	r1, [r2, r3]
//			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x00, 1, name, strlen(name), 1000);
			Menu=pos=0;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <Name+0x294>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <Name+0x294>)
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <Name+0x298>)
 8001320:	701a      	strb	r2, [r3, #0]
			break;
 8001322:	e019      	b.n	8001358 <Name+0x284>
		}
		if(Button_Menu_Esc || Menu==1)
 8001324:	2108      	movs	r1, #8
 8001326:	4813      	ldr	r0, [pc, #76]	; (8001374 <Name+0x2a0>)
 8001328:	f002 f9c2 	bl	80036b0 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d104      	bne.n	800133c <Name+0x268>
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <Name+0x298>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	f47f aef3 	bne.w	8001122 <Name+0x4e>
		{
			if(pos>len)
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <Name+0x294>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	429a      	cmp	r2, r3
 8001344:	d205      	bcs.n	8001352 <Name+0x27e>
				name[pos+1]='\0';
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <Name+0x294>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <Name+0x28c>)
 800134e:	2100      	movs	r1, #0
 8001350:	54d1      	strb	r1, [r2, r3]
			Menu=0;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <Name+0x298>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
//			HAL_I2C_Mem_Read(&hi2c1, 0xA1, 0x00, 1, &name, strlen(name), 1000);
			break;
		}
	}
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000060 	.word	0x20000060
 8001364:	080044d0 	.word	0x080044d0
 8001368:	20000076 	.word	0x20000076
 800136c:	20000077 	.word	0x20000077
 8001370:	080044e8 	.word	0x080044e8
 8001374:	40010c00 	.word	0x40010c00
 8001378:	20000000 	.word	0x20000000
 800137c:	08004894 	.word	0x08004894
 8001380:	080047bc 	.word	0x080047bc

08001384 <Blink>:


void Blink(char *char_set)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	SetCursor(0, 6, 5);
 800138c:	2205      	movs	r2, #5
 800138e:	2106      	movs	r1, #6
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fa23 	bl	80007dc <SetCursor>
	if(!(Button_Menu_Esc ||Button_Test_Enter || Menu))
 8001396:	2108      	movs	r1, #8
 8001398:	4819      	ldr	r0, [pc, #100]	; (8001400 <Blink+0x7c>)
 800139a:	f002 f989 	bl	80036b0 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11f      	bne.n	80013e4 <Blink+0x60>
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4816      	ldr	r0, [pc, #88]	; (8001400 <Blink+0x7c>)
 80013a8:	f002 f982 	bl	80036b0 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d118      	bne.n	80013e4 <Blink+0x60>
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <Blink+0x80>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d114      	bne.n	80013e4 <Blink+0x60>
	{
		Print(char_set);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fb08 	bl	80009d0 <Print>
		HAL_Delay(5);
 80013c0:	2005      	movs	r0, #5
 80013c2:	f001 fa17 	bl	80027f4 <HAL_Delay>
		if(Menu==0)
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <Blink+0x80>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10a      	bne.n	80013e4 <Blink+0x60>
		{
		SetCursor(0, 6, 5);
 80013ce:	2205      	movs	r2, #5
 80013d0:	2106      	movs	r1, #6
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff fa02 	bl	80007dc <SetCursor>
		Print("                  ");
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <Blink+0x84>)
 80013da:	f7ff faf9 	bl	80009d0 <Print>
		HAL_Delay(5);
 80013de:	2005      	movs	r0, #5
 80013e0:	f001 fa08 	bl	80027f4 <HAL_Delay>
		}
	}
	if(Button_Menu_Esc)
 80013e4:	2108      	movs	r1, #8
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <Blink+0x7c>)
 80013e8:	f002 f962 	bl	80036b0 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <Blink+0x74>
		Menu=1;
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <Blink+0x80>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010c00 	.word	0x40010c00
 8001404:	20000077 	.word	0x20000077
 8001408:	080044fc 	.word	0x080044fc

0800140c <Result>:

void Result()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	float add=0;
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
	char row=1;
 8001418:	2301      	movs	r3, #1
 800141a:	70fb      	strb	r3, [r7, #3]
	SetCursor(0, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff f9db 	bl	80007dc <SetCursor>
	Print("ug/in");
 8001426:	483e      	ldr	r0, [pc, #248]	; (8001520 <Result+0x114>)
 8001428:	f7ff fad2 	bl	80009d0 <Print>
	SetCursor(1, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff f9d3 	bl	80007dc <SetCursor>
	Print("ug/in");
 8001436:	483a      	ldr	r0, [pc, #232]	; (8001520 <Result+0x114>)
 8001438:	f7ff faca 	bl	80009d0 <Print>
	for(short int i=0;i<test;i++)
 800143c:	2300      	movs	r3, #0
 800143e:	803b      	strh	r3, [r7, #0]
 8001440:	e047      	b.n	80014d2 <Result+0xc6>
	{
		if((i%2)==0)
 8001442:	883b      	ldrh	r3, [r7, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <Result+0x50>
			SetCursor(0, row, 0);
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff f9c1 	bl	80007dc <SetCursor>
 800145a:	e007      	b.n	800146c <Result+0x60>
		else
			SetCursor(1, row++, 0);
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	70fa      	strb	r2, [r7, #3]
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff f9b8 	bl	80007dc <SetCursor>

		if(i<9)
 800146c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001470:	2b08      	cmp	r3, #8
 8001472:	dc0e      	bgt.n	8001492 <Result+0x86>
		{
			Print(" ");
 8001474:	482b      	ldr	r0, [pc, #172]	; (8001524 <Result+0x118>)
 8001476:	f7ff faab 	bl	80009d0 <Print>
			Number(i+1, 0);
 800147a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800147e:	3301      	adds	r3, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe ff25 	bl	80002d0 <__aeabi_i2f>
 8001486:	4603      	mov	r3, r0
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb66 	bl	8000b5c <Number>
 8001490:	e002      	b.n	8001498 <Result+0x8c>
		}
		else
			Print("10");
 8001492:	4825      	ldr	r0, [pc, #148]	; (8001528 <Result+0x11c>)
 8001494:	f7ff fa9c 	bl	80009d0 <Print>
		Print("-");
 8001498:	4824      	ldr	r0, [pc, #144]	; (800152c <Result+0x120>)
 800149a:	f7ff fa99 	bl	80009d0 <Print>
		Number(mic_value[i],2);
 800149e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <Result+0x124>)
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	2102      	movs	r1, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fb56 	bl	8000b5c <Number>
		add+=mic_value[i];
 80014b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014b4:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <Result+0x124>)
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7fe fe53 	bl	8000168 <__addsf3>
 80014c2:	4603      	mov	r3, r0
 80014c4:	607b      	str	r3, [r7, #4]
	for(short int i=0;i<test;i++)
 80014c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	803b      	strh	r3, [r7, #0]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <Result+0x128>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbb0      	blt.n	8001442 <Result+0x36>
	}
	SetCursor(0, 6, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2106      	movs	r1, #6
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff f979 	bl	80007dc <SetCursor>
	Print("AVERAGE : ");
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <Result+0x12c>)
 80014ec:	f7ff fa70 	bl	80009d0 <Print>
	Number((add/(float)test),2);
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <Result+0x128>)
 80014f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe feea 	bl	80002d0 <__aeabi_i2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7fe ffed 	bl	80004e0 <__aeabi_fdiv>
 8001506:	4603      	mov	r3, r0
 8001508:	2102      	movs	r1, #2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fb26 	bl	8000b5c <Number>
	Print("ug/inch");
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <Result+0x130>)
 8001512:	f7ff fa5d 	bl	80009d0 <Print>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	08004510 	.word	0x08004510
 8001524:	08004518 	.word	0x08004518
 8001528:	0800451c 	.word	0x0800451c
 800152c:	08004520 	.word	0x08004520
 8001530:	2000000c 	.word	0x2000000c
 8001534:	20000078 	.word	0x20000078
 8001538:	08004524 	.word	0x08004524
 800153c:	08004530 	.word	0x08004530

08001540 <printer>:
void printer()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	Heading(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f000 fe62 	bl	8002210 <Heading>
	string(" AIS Digi mic smart - 12 \r\n");
 800154c:	483d      	ldr	r0, [pc, #244]	; (8001644 <printer+0x104>)
 800154e:	f000 fe77 	bl	8002240 <string>
	Heading(0);
 8001552:	2000      	movs	r0, #0
 8001554:	f000 fe5c 	bl	8002210 <Heading>
	string(name);
 8001558:	483b      	ldr	r0, [pc, #236]	; (8001648 <printer+0x108>)
 800155a:	f000 fe71 	bl	8002240 <string>
	string("\r");
 800155e:	483b      	ldr	r0, [pc, #236]	; (800164c <printer+0x10c>)
 8001560:	f000 fe6e 	bl	8002240 <string>
	string(" LOT NO : ");
 8001564:	483a      	ldr	r0, [pc, #232]	; (8001650 <printer+0x110>)
 8001566:	f000 fe6b 	bl	8002240 <string>
	string(Lot);
 800156a:	483a      	ldr	r0, [pc, #232]	; (8001654 <printer+0x114>)
 800156c:	f000 fe68 	bl	8002240 <string>
	string("\r\n");
 8001570:	4839      	ldr	r0, [pc, #228]	; (8001658 <printer+0x118>)
 8001572:	f000 fe65 	bl	8002240 <string>
	string(" TEST-#    mic(ug/inch)\r\n");
 8001576:	4839      	ldr	r0, [pc, #228]	; (800165c <printer+0x11c>)
 8001578:	f000 fe62 	bl	8002240 <string>
	float add=0;
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
	for(char print=1;print<=test;print++)
 8001582:	2301      	movs	r3, #1
 8001584:	70fb      	strb	r3, [r7, #3]
 8001586:	e032      	b.n	80015ee <printer+0xae>
	{
		string("  ");
 8001588:	4835      	ldr	r0, [pc, #212]	; (8001660 <printer+0x120>)
 800158a:	f000 fe59 	bl	8002240 <string>
		if(print<10)
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	2b09      	cmp	r3, #9
 8001592:	d80c      	bhi.n	80015ae <printer+0x6e>
		{
			string(" ");
 8001594:	4833      	ldr	r0, [pc, #204]	; (8001664 <printer+0x124>)
 8001596:	f000 fe53 	bl	8002240 <string>
			Number(print,16);
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe93 	bl	80002c8 <__aeabi_ui2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2110      	movs	r1, #16
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fad8 	bl	8000b5c <Number>
 80015ac:	e002      	b.n	80015b4 <printer+0x74>
		}
		else
			string("10");
 80015ae:	482e      	ldr	r0, [pc, #184]	; (8001668 <printer+0x128>)
 80015b0:	f000 fe46 	bl	8002240 <string>
		string("          ");
 80015b4:	482d      	ldr	r0, [pc, #180]	; (800166c <printer+0x12c>)
 80015b6:	f000 fe43 	bl	8002240 <string>
		Number(mic_value[print-1], 18);
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	3b01      	subs	r3, #1
 80015be:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <printer+0x130>)
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	2112      	movs	r1, #18
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fac8 	bl	8000b5c <Number>
		add+=mic_value[print-1];
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <printer+0x130>)
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7fe fdc5 	bl	8000168 <__addsf3>
 80015de:	4603      	mov	r3, r0
 80015e0:	607b      	str	r3, [r7, #4]
		string("\r");
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <printer+0x10c>)
 80015e4:	f000 fe2c 	bl	8002240 <string>
	for(char print=1;print<=test;print++)
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	3301      	adds	r3, #1
 80015ec:	70fb      	strb	r3, [r7, #3]
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	4a20      	ldr	r2, [pc, #128]	; (8001674 <printer+0x134>)
 80015f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015f6:	4293      	cmp	r3, r2
 80015f8:	ddc6      	ble.n	8001588 <printer+0x48>
	}
	add=add/(float)test;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <printer+0x134>)
 80015fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fe65 	bl	80002d0 <__aeabi_i2f>
 8001606:	4603      	mov	r3, r0
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7fe ff68 	bl	80004e0 <__aeabi_fdiv>
 8001610:	4603      	mov	r3, r0
 8001612:	607b      	str	r3, [r7, #4]
	Heading(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f000 fdfb 	bl	8002210 <Heading>
	string(" ---------------------- \r");
 800161a:	4817      	ldr	r0, [pc, #92]	; (8001678 <printer+0x138>)
 800161c:	f000 fe10 	bl	8002240 <string>
	string(" AVERAGE   ");
 8001620:	4816      	ldr	r0, [pc, #88]	; (800167c <printer+0x13c>)
 8001622:	f000 fe0d 	bl	8002240 <string>
	Number(add,18);
 8001626:	2112      	movs	r1, #18
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fa97 	bl	8000b5c <Number>
	string("\r");
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <printer+0x10c>)
 8001630:	f000 fe06 	bl	8002240 <string>
	string(" ----------------------- \r\n\n\n");
 8001634:	4812      	ldr	r0, [pc, #72]	; (8001680 <printer+0x140>)
 8001636:	f000 fe03 	bl	8002240 <string>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	08004538 	.word	0x08004538
 8001648:	20000060 	.word	0x20000060
 800164c:	08004554 	.word	0x08004554
 8001650:	08004558 	.word	0x08004558
 8001654:	20000000 	.word	0x20000000
 8001658:	08004564 	.word	0x08004564
 800165c:	08004568 	.word	0x08004568
 8001660:	08004584 	.word	0x08004584
 8001664:	08004518 	.word	0x08004518
 8001668:	0800451c 	.word	0x0800451c
 800166c:	08004588 	.word	0x08004588
 8001670:	2000000c 	.word	0x2000000c
 8001674:	20000078 	.word	0x20000078
 8001678:	08004594 	.word	0x08004594
 800167c:	080045b0 	.word	0x080045b0
 8001680:	080045bc 	.word	0x080045bc

08001684 <Password>:
void Password()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	char count=0,sector=0,y_axis=52,pas[4];
 800168a:	2300      	movs	r3, #0
 800168c:	71fb      	strb	r3, [r7, #7]
 800168e:	2300      	movs	r3, #0
 8001690:	71bb      	strb	r3, [r7, #6]
 8001692:	2334      	movs	r3, #52	; 0x34
 8001694:	717b      	strb	r3, [r7, #5]
	Menu=pos=0;
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <Password+0x94>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <Password+0x94>)
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <Password+0x98>)
 80016a2:	701a      	strb	r2, [r3, #0]
	SetCursor(sector, 2, y_axis);
 80016a4:	797a      	ldrb	r2, [r7, #5]
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	2102      	movs	r1, #2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f896 	bl	80007dc <SetCursor>
	Print("0---");
 80016b0:	481b      	ldr	r0, [pc, #108]	; (8001720 <Password+0x9c>)
 80016b2:	f7ff f98d 	bl	80009d0 <Print>
	while(1)
	{
		if(Button_Move || Menu==5)
 80016b6:	2140      	movs	r1, #64	; 0x40
 80016b8:	481a      	ldr	r0, [pc, #104]	; (8001724 <Password+0xa0>)
 80016ba:	f001 fff9 	bl	80036b0 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <Password+0x48>
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <Password+0x98>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d14e      	bne.n	800176a <Password+0xe6>
		{
			pos++;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <Password+0x94>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <Password+0x94>)
 80016d6:	701a      	strb	r2, [r3, #0]
			while(Button_Move);
 80016d8:	bf00      	nop
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	4811      	ldr	r0, [pc, #68]	; (8001724 <Password+0xa0>)
 80016de:	f001 ffe7 	bl	80036b0 <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f8      	bne.n	80016da <Password+0x56>

			if(pos==4)
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <Password+0x94>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d102      	bne.n	80016f6 <Password+0x72>
				pos=0;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <Password+0x94>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
			if(pos<2)
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <Password+0x94>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d814      	bhi.n	8001728 <Password+0xa4>
			{
				sector=0;
 80016fe:	2300      	movs	r3, #0
 8001700:	71bb      	strb	r3, [r7, #6]
				y_axis=52+(pos*6);
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <Password+0x94>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	0052      	lsls	r2, r2, #1
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3334      	adds	r3, #52	; 0x34
 8001712:	717b      	strb	r3, [r7, #5]
 8001714:	e013      	b.n	800173e <Password+0xba>
 8001716:	bf00      	nop
 8001718:	20000076 	.word	0x20000076
 800171c:	20000077 	.word	0x20000077
 8001720:	080045dc 	.word	0x080045dc
 8001724:	40010c00 	.word	0x40010c00
			}
			else
			{
				sector=1;
 8001728:	2301      	movs	r3, #1
 800172a:	71bb      	strb	r3, [r7, #6]
				y_axis=(pos-2)*6;
 800172c:	4bb1      	ldr	r3, [pc, #708]	; (80019f4 <Password+0x370>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	0052      	lsls	r2, r2, #1
 8001734:	4413      	add	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	3b0c      	subs	r3, #12
 800173c:	717b      	strb	r3, [r7, #5]
			}
			SetCursor(0, 2, 52);
 800173e:	2234      	movs	r2, #52	; 0x34
 8001740:	2102      	movs	r1, #2
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff f84a 	bl	80007dc <SetCursor>
			Print("----");
 8001748:	48ab      	ldr	r0, [pc, #684]	; (80019f8 <Password+0x374>)
 800174a:	f7ff f941 	bl	80009d0 <Print>
			SetCursor(sector, 2, y_axis);
 800174e:	797a      	ldrb	r2, [r7, #5]
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	2102      	movs	r1, #2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f841 	bl	80007dc <SetCursor>
			Print("0");
 800175a:	48a8      	ldr	r0, [pc, #672]	; (80019fc <Password+0x378>)
 800175c:	f7ff f938 	bl	80009d0 <Print>
			Menu=count=0;
 8001760:	2300      	movs	r3, #0
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4aa6      	ldr	r2, [pc, #664]	; (8001a00 <Password+0x37c>)
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	7013      	strb	r3, [r2, #0]
		}
		if(Button_UP_Delete || Menu==4)
 800176a:	2110      	movs	r1, #16
 800176c:	48a5      	ldr	r0, [pc, #660]	; (8001a04 <Password+0x380>)
 800176e:	f001 ff9f 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <Password+0xfc>
 8001778:	4ba1      	ldr	r3, [pc, #644]	; (8001a00 <Password+0x37c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b04      	cmp	r3, #4
 800177e:	d123      	bne.n	80017c8 <Password+0x144>
		{
			Menu=0;
 8001780:	4b9f      	ldr	r3, [pc, #636]	; (8001a00 <Password+0x37c>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
			while(Button_UP_Delete);
 8001786:	bf00      	nop
 8001788:	2110      	movs	r1, #16
 800178a:	489e      	ldr	r0, [pc, #632]	; (8001a04 <Password+0x380>)
 800178c:	f001 ff90 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f8      	bne.n	8001788 <Password+0x104>
			SetCursor(sector, 2, y_axis);
 8001796:	797a      	ldrb	r2, [r7, #5]
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	2102      	movs	r1, #2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f81d 	bl	80007dc <SetCursor>

			if(count==9)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b09      	cmp	r3, #9
 80017a6:	d101      	bne.n	80017ac <Password+0x128>
				count=-1;
 80017a8:	23ff      	movs	r3, #255	; 0xff
 80017aa:	71fb      	strb	r3, [r7, #7]

			count++;
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	3301      	adds	r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]
			loop(&number[count*6]);
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	461a      	mov	r2, r3
 80017be:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <Password+0x384>)
 80017c0:	4413      	add	r3, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f850 	bl	8000868 <loop>
		}
		if(Button_Down_Result || Menu==3)
 80017c8:	2120      	movs	r1, #32
 80017ca:	488e      	ldr	r0, [pc, #568]	; (8001a04 <Password+0x380>)
 80017cc:	f001 ff70 	bl	80036b0 <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <Password+0x15a>
 80017d6:	4b8a      	ldr	r3, [pc, #552]	; (8001a00 <Password+0x37c>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d123      	bne.n	8001826 <Password+0x1a2>
		{
			Menu=0;
 80017de:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <Password+0x37c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
			while(Button_Down_Result);
 80017e4:	bf00      	nop
 80017e6:	2120      	movs	r1, #32
 80017e8:	4886      	ldr	r0, [pc, #536]	; (8001a04 <Password+0x380>)
 80017ea:	f001 ff61 	bl	80036b0 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f8      	bne.n	80017e6 <Password+0x162>
			SetCursor(sector, 2, y_axis);
 80017f4:	797a      	ldrb	r2, [r7, #5]
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	2102      	movs	r1, #2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe ffee 	bl	80007dc <SetCursor>

			if(count==0)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <Password+0x186>
				count=10;
 8001806:	230a      	movs	r3, #10
 8001808:	71fb      	strb	r3, [r7, #7]

			count--;
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	3b01      	subs	r3, #1
 800180e:	71fb      	strb	r3, [r7, #7]
			loop(&number[count*6]);
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	461a      	mov	r2, r3
 800181c:	4b7a      	ldr	r3, [pc, #488]	; (8001a08 <Password+0x384>)
 800181e:	4413      	add	r3, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f821 	bl	8000868 <loop>

		}
		pas[pos]=count+48;
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <Password+0x370>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	4619      	mov	r1, r3
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3330      	adds	r3, #48	; 0x30
 8001830:	b2da      	uxtb	r2, r3
 8001832:	f101 0308 	add.w	r3, r1, #8
 8001836:	443b      	add	r3, r7
 8001838:	f803 2c08 	strb.w	r2, [r3, #-8]
		if(Button_Test_Enter || Menu==2)
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	4871      	ldr	r0, [pc, #452]	; (8001a04 <Password+0x380>)
 8001840:	f001 ff36 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d104      	bne.n	8001854 <Password+0x1d0>
 800184a:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <Password+0x37c>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b02      	cmp	r3, #2
 8001850:	f040 80e4 	bne.w	8001a1c <Password+0x398>
		{
			Menu=0;
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <Password+0x37c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
			if(pas[0]=='8'&&pas[1]=='4'&&pas[2]=='2'&&pas[3]=='1')
 800185a:	783b      	ldrb	r3, [r7, #0]
 800185c:	2b38      	cmp	r3, #56	; 0x38
 800185e:	f040 80bd 	bne.w	80019dc <Password+0x358>
 8001862:	787b      	ldrb	r3, [r7, #1]
 8001864:	2b34      	cmp	r3, #52	; 0x34
 8001866:	f040 80b9 	bne.w	80019dc <Password+0x358>
 800186a:	78bb      	ldrb	r3, [r7, #2]
 800186c:	2b32      	cmp	r3, #50	; 0x32
 800186e:	f040 80b5 	bne.w	80019dc <Password+0x358>
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	2b31      	cmp	r3, #49	; 0x31
 8001876:	f040 80b1 	bne.w	80019dc <Password+0x358>
			{
				Clear();
 800187a:	f7fe ff77 	bl	800076c <Clear>
//				HAL_I2C_Mem_Read(&hi2c1, 0xA1, 0xF0, 1, &calibrate, 1, 1000);
				SetCursor(0, 0, 20);
 800187e:	2214      	movs	r2, #20
 8001880:	2100      	movs	r1, #0
 8001882:	2000      	movs	r0, #0
 8001884:	f7fe ffaa 	bl	80007dc <SetCursor>
				Print("   ENTER CF   ");
 8001888:	4860      	ldr	r0, [pc, #384]	; (8001a0c <Password+0x388>)
 800188a:	f7ff f8a1 	bl	80009d0 <Print>
				SetCursor(0, 2, 52);
 800188e:	2234      	movs	r2, #52	; 0x34
 8001890:	2102      	movs	r1, #2
 8001892:	2000      	movs	r0, #0
 8001894:	f7fe ffa2 	bl	80007dc <SetCursor>
				Number(calibrate,0);
 8001898:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <Password+0x38c>)
 800189a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fd16 	bl	80002d0 <__aeabi_i2f>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f957 	bl	8000b5c <Number>
				Print("%(90-110)");
 80018ae:	4859      	ldr	r0, [pc, #356]	; (8001a14 <Password+0x390>)
 80018b0:	f7ff f88e 	bl	80009d0 <Print>
				while(1)
				{
					Menu=0;
 80018b4:	4b52      	ldr	r3, [pc, #328]	; (8001a00 <Password+0x37c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
					if(Button_UP_Delete || Menu==4)
 80018ba:	2110      	movs	r1, #16
 80018bc:	4851      	ldr	r0, [pc, #324]	; (8001a04 <Password+0x380>)
 80018be:	f001 fef7 	bl	80036b0 <HAL_GPIO_ReadPin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <Password+0x24c>
 80018c8:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <Password+0x37c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d12f      	bne.n	8001930 <Password+0x2ac>
					{
						if(calibrate<110)
 80018d0:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <Password+0x38c>)
 80018d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d6:	2b6d      	cmp	r3, #109	; 0x6d
 80018d8:	dc08      	bgt.n	80018ec <Password+0x268>
							calibrate++;
 80018da:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <Password+0x38c>)
 80018dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <Password+0x38c>)
 80018ea:	801a      	strh	r2, [r3, #0]
						while(Button_UP_Delete);
 80018ec:	bf00      	nop
 80018ee:	2110      	movs	r1, #16
 80018f0:	4844      	ldr	r0, [pc, #272]	; (8001a04 <Password+0x380>)
 80018f2:	f001 fedd 	bl	80036b0 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f8      	bne.n	80018ee <Password+0x26a>
						SetCursor(0, 2, 52);
 80018fc:	2234      	movs	r2, #52	; 0x34
 80018fe:	2102      	movs	r1, #2
 8001900:	2000      	movs	r0, #0
 8001902:	f7fe ff6b 	bl	80007dc <SetCursor>
						if(calibrate<100)
 8001906:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <Password+0x38c>)
 8001908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190c:	2b63      	cmp	r3, #99	; 0x63
 800190e:	dc04      	bgt.n	800191a <Password+0x296>
							Number(0, 0);
 8001910:	2100      	movs	r1, #0
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f7ff f921 	bl	8000b5c <Number>
						Number(calibrate,0);
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <Password+0x38c>)
 800191c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fcd5 	bl	80002d0 <__aeabi_i2f>
 8001926:	4603      	mov	r3, r0
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f916 	bl	8000b5c <Number>
					}
					if(Button_Down_Result || Menu==3)
 8001930:	2120      	movs	r1, #32
 8001932:	4834      	ldr	r0, [pc, #208]	; (8001a04 <Password+0x380>)
 8001934:	f001 febc 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <Password+0x2c2>
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <Password+0x37c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d12f      	bne.n	80019a6 <Password+0x322>
					{
						if(calibrate>90)
 8001946:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <Password+0x38c>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	2b5a      	cmp	r3, #90	; 0x5a
 800194e:	dd08      	ble.n	8001962 <Password+0x2de>
							calibrate--;
 8001950:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <Password+0x38c>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29b      	uxth	r3, r3
 800195c:	b21a      	sxth	r2, r3
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <Password+0x38c>)
 8001960:	801a      	strh	r2, [r3, #0]
						while(Button_Down_Result);
 8001962:	bf00      	nop
 8001964:	2120      	movs	r1, #32
 8001966:	4827      	ldr	r0, [pc, #156]	; (8001a04 <Password+0x380>)
 8001968:	f001 fea2 	bl	80036b0 <HAL_GPIO_ReadPin>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f8      	bne.n	8001964 <Password+0x2e0>
						SetCursor(0, 2, 52);
 8001972:	2234      	movs	r2, #52	; 0x34
 8001974:	2102      	movs	r1, #2
 8001976:	2000      	movs	r0, #0
 8001978:	f7fe ff30 	bl	80007dc <SetCursor>
						if(calibrate<100)
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <Password+0x38c>)
 800197e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001982:	2b63      	cmp	r3, #99	; 0x63
 8001984:	dc04      	bgt.n	8001990 <Password+0x30c>
							Number(0, 0);
 8001986:	2100      	movs	r1, #0
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f7ff f8e6 	bl	8000b5c <Number>
						Number(calibrate,0);
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <Password+0x38c>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fc9a 	bl	80002d0 <__aeabi_i2f>
 800199c:	4603      	mov	r3, r0
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff f8db 	bl	8000b5c <Number>
					}
					if(Button_Test_Enter)
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <Password+0x380>)
 80019aa:	f001 fe81 	bl	80036b0 <HAL_GPIO_ReadPin>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <Password+0x340>
					{
//						HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0xF0, 1, &calibrate, 1, 1000);
						break;
					}
					if(Button_Menu_Esc)
 80019b4:	2108      	movs	r1, #8
 80019b6:	4813      	ldr	r0, [pc, #76]	; (8001a04 <Password+0x380>)
 80019b8:	f001 fe7a 	bl	80036b0 <HAL_GPIO_ReadPin>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <Password+0x344>
					Menu=0;
 80019c2:	e777      	b.n	80018b4 <Password+0x230>
						break;
 80019c4:	bf00      	nop
 80019c6:	e000      	b.n	80019ca <Password+0x346>
					{
//						HAL_I2C_Mem_Read(&hi2c1, 0xA1, 0xF0, 1, &calibrate, 1, 1000);
						break;
 80019c8:	bf00      	nop
			if(pas[0]=='8'&&pas[1]=='4'&&pas[2]=='2'&&pas[3]=='1')
 80019ca:	bf00      	nop
				Clear();
				SetCursor(0, 2, 20);
				Print("WRONG PASSWORD");
				break;
			}
			Menu=pos=0;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <Password+0x370>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <Password+0x370>)
 80019d4:	781a      	ldrb	r2, [r3, #0]
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <Password+0x37c>)
 80019d8:	701a      	strb	r2, [r3, #0]
			break;
 80019da:	e02e      	b.n	8001a3a <Password+0x3b6>
				Clear();
 80019dc:	f7fe fec6 	bl	800076c <Clear>
				SetCursor(0, 2, 20);
 80019e0:	2214      	movs	r2, #20
 80019e2:	2102      	movs	r1, #2
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7fe fef9 	bl	80007dc <SetCursor>
				Print("WRONG PASSWORD");
 80019ea:	480b      	ldr	r0, [pc, #44]	; (8001a18 <Password+0x394>)
 80019ec:	f7fe fff0 	bl	80009d0 <Print>
				break;
 80019f0:	e023      	b.n	8001a3a <Password+0x3b6>
 80019f2:	bf00      	nop
 80019f4:	20000076 	.word	0x20000076
 80019f8:	080045e4 	.word	0x080045e4
 80019fc:	080044cc 	.word	0x080044cc
 8001a00:	20000077 	.word	0x20000077
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	08004858 	.word	0x08004858
 8001a0c:	080045ec 	.word	0x080045ec
 8001a10:	2000000a 	.word	0x2000000a
 8001a14:	080045fc 	.word	0x080045fc
 8001a18:	08004608 	.word	0x08004608
		}
		if(Button_Menu_Esc || Menu==1)
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	480c      	ldr	r0, [pc, #48]	; (8001a50 <Password+0x3cc>)
 8001a20:	f001 fe46 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d104      	bne.n	8001a34 <Password+0x3b0>
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <Password+0x3d0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	f47f ae41 	bne.w	80016b6 <Password+0x32>
		{
			Menu=0;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <Password+0x3d0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
	Clear();
 8001a3a:	f7fe fe97 	bl	800076c <Clear>
	Test_Mode();
 8001a3e:	f000 facd 	bl	8001fdc <Test_Mode>
	Blank(0);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 fa74 	bl	8001f30 <Blank>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	20000077 	.word	0x20000077

08001a58 <start_up>:
void start_up()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
	if(test<10)
 8001a5e:	4bb4      	ldr	r3, [pc, #720]	; (8001d30 <start_up+0x2d8>)
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	2b09      	cmp	r3, #9
 8001a66:	dc03      	bgt.n	8001a70 <start_up+0x18>
		Blink("READY FOR THE TEST");
 8001a68:	48b2      	ldr	r0, [pc, #712]	; (8001d34 <start_up+0x2dc>)
 8001a6a:	f7ff fc8b 	bl	8001384 <Blink>
 8001a6e:	e002      	b.n	8001a76 <start_up+0x1e>
	else
		Blink("  TEST COMPLETED  ");
 8001a70:	48b1      	ldr	r0, [pc, #708]	; (8001d38 <start_up+0x2e0>)
 8001a72:	f7ff fc87 	bl	8001384 <Blink>
	if(Menu==6)
 8001a76:	4bb1      	ldr	r3, [pc, #708]	; (8001d3c <start_up+0x2e4>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d117      	bne.n	8001aae <start_up+0x56>
	{
		Menu=0;
 8001a7e:	4baf      	ldr	r3, [pc, #700]	; (8001d3c <start_up+0x2e4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
		Clear();
 8001a84:	f7fe fe72 	bl	800076c <Clear>
		SetCursor(0, 0, 20);
 8001a88:	2214      	movs	r2, #20
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7fe fea5 	bl	80007dc <SetCursor>
		Print("ENTER PASSWORD");
 8001a92:	48ab      	ldr	r0, [pc, #684]	; (8001d40 <start_up+0x2e8>)
 8001a94:	f7fe ff9c 	bl	80009d0 <Print>
		SetCursor(0, 2, 52);
 8001a98:	2234      	movs	r2, #52	; 0x34
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7fe fe9d 	bl	80007dc <SetCursor>
		Print("0---");
 8001aa2:	48a8      	ldr	r0, [pc, #672]	; (8001d44 <start_up+0x2ec>)
 8001aa4:	f7fe ff94 	bl	80009d0 <Print>
		Password();
 8001aa8:	f7ff fdec 	bl	8001684 <Password>
 8001aac:	e1f2      	b.n	8001e94 <start_up+0x43c>
	}
	else if(Button_Menu_Esc || Menu==1)
 8001aae:	2108      	movs	r1, #8
 8001ab0:	48a5      	ldr	r0, [pc, #660]	; (8001d48 <start_up+0x2f0>)
 8001ab2:	f001 fdfd 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d103      	bne.n	8001ac4 <start_up+0x6c>
 8001abc:	4b9f      	ldr	r3, [pc, #636]	; (8001d3c <start_up+0x2e4>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d168      	bne.n	8001b96 <start_up+0x13e>
	{
		char move=2;Menu=0;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	77fb      	strb	r3, [r7, #31]
 8001ac8:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <start_up+0x2e4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
		SetCursor(0, 6, 5);
 8001ace:	2205      	movs	r2, #5
 8001ad0:	2106      	movs	r1, #6
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7fe fe82 	bl	80007dc <SetCursor>
		Print("  CHOOSE  OPTION  ");
 8001ad8:	489c      	ldr	r0, [pc, #624]	; (8001d4c <start_up+0x2f4>)
 8001ada:	f7fe ff79 	bl	80009d0 <Print>
		Move(move,"NAME","LOT");
 8001ade:	7ffb      	ldrb	r3, [r7, #31]
 8001ae0:	4a9b      	ldr	r2, [pc, #620]	; (8001d50 <start_up+0x2f8>)
 8001ae2:	499c      	ldr	r1, [pc, #624]	; (8001d54 <start_up+0x2fc>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff f8f1 	bl	8000ccc <Move>
		while(Button_Menu_Esc);
 8001aea:	bf00      	nop
 8001aec:	2108      	movs	r1, #8
 8001aee:	4896      	ldr	r0, [pc, #600]	; (8001d48 <start_up+0x2f0>)
 8001af0:	f001 fdde 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f8      	bne.n	8001aec <start_up+0x94>
		while((!Button_Menu_Esc) && (move & 2))
 8001afa:	e038      	b.n	8001b6e <start_up+0x116>
		{
			if(Button_Move)
 8001afc:	2140      	movs	r1, #64	; 0x40
 8001afe:	4892      	ldr	r0, [pc, #584]	; (8001d48 <start_up+0x2f0>)
 8001b00:	f001 fdd6 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <start_up+0xc6>
			{
				move^=1<<0;
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
 8001b0c:	f083 0301 	eor.w	r3, r3, #1
 8001b10:	77fb      	strb	r3, [r7, #31]
				Move(move,"NAME","LOT");
 8001b12:	7ffb      	ldrb	r3, [r7, #31]
 8001b14:	4a8e      	ldr	r2, [pc, #568]	; (8001d50 <start_up+0x2f8>)
 8001b16:	498f      	ldr	r1, [pc, #572]	; (8001d54 <start_up+0x2fc>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff f8d7 	bl	8000ccc <Move>
			}
			while(Button_Move);
 8001b1e:	bf00      	nop
 8001b20:	2140      	movs	r1, #64	; 0x40
 8001b22:	4889      	ldr	r0, [pc, #548]	; (8001d48 <start_up+0x2f0>)
 8001b24:	f001 fdc4 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f8      	bne.n	8001b20 <start_up+0xc8>
			if(Button_Test_Enter)
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	4885      	ldr	r0, [pc, #532]	; (8001d48 <start_up+0x2f0>)
 8001b32:	f001 fdbd 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d018      	beq.n	8001b6e <start_up+0x116>
			{
				while(Button_Test_Enter);
 8001b3c:	bf00      	nop
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	4881      	ldr	r0, [pc, #516]	; (8001d48 <start_up+0x2f0>)
 8001b42:	f001 fdb5 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f8      	bne.n	8001b3e <start_up+0xe6>
				if((move & 1)==0)
 8001b4c:	7ffb      	ldrb	r3, [r7, #31]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <start_up+0x104>
					Name();
 8001b56:	f7ff fabd 	bl	80010d4 <Name>
 8001b5a:	e006      	b.n	8001b6a <start_up+0x112>
				else if((move & 1)==1)
 8001b5c:	7ffb      	ldrb	r3, [r7, #31]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <start_up+0x112>
					lot();
 8001b66:	f7ff f949 	bl	8000dfc <lot>
				move=0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	77fb      	strb	r3, [r7, #31]
		while((!Button_Menu_Esc) && (move & 2))
 8001b6e:	2108      	movs	r1, #8
 8001b70:	4875      	ldr	r0, [pc, #468]	; (8001d48 <start_up+0x2f0>)
 8001b72:	f001 fd9d 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d104      	bne.n	8001b86 <start_up+0x12e>
 8001b7c:	7ffb      	ldrb	r3, [r7, #31]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1ba      	bne.n	8001afc <start_up+0xa4>
			}
		}
		Clear();
 8001b86:	f7fe fdf1 	bl	800076c <Clear>
		Test_Mode();
 8001b8a:	f000 fa27 	bl	8001fdc <Test_Mode>
		Blank(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f000 f9ce 	bl	8001f30 <Blank>
	{
 8001b94:	e17e      	b.n	8001e94 <start_up+0x43c>
	}

	else if(Button_Test_Enter || Menu==2)
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	486b      	ldr	r0, [pc, #428]	; (8001d48 <start_up+0x2f0>)
 8001b9a:	f001 fd89 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <start_up+0x156>
 8001ba4:	4b65      	ldr	r3, [pc, #404]	; (8001d3c <start_up+0x2e4>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	f040 80f0 	bne.w	8001d8e <start_up+0x336>
	{
		while(Button_Test_Enter);
 8001bae:	bf00      	nop
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	4865      	ldr	r0, [pc, #404]	; (8001d48 <start_up+0x2f0>)
 8001bb4:	f001 fd7c 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f8      	bne.n	8001bb0 <start_up+0x158>
		if(test<10)
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <start_up+0x2d8>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	2b09      	cmp	r3, #9
 8001bc6:	f300 8165 	bgt.w	8001e94 <start_up+0x43c>
		{
			test++;
 8001bca:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <start_up+0x2d8>)
 8001bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <start_up+0x2d8>)
 8001bda:	801a      	strh	r2, [r3, #0]
			SetCursor(0, 6, 5);
 8001bdc:	2205      	movs	r2, #5
 8001bde:	2106      	movs	r1, #6
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7fe fdfb 	bl	80007dc <SetCursor>
			Print("   PROCESSING...  ");
 8001be6:	485c      	ldr	r0, [pc, #368]	; (8001d58 <start_up+0x300>)
 8001be8:	f7fe fef2 	bl	80009d0 <Print>
			Blank(0);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f000 f99f 	bl	8001f30 <Blank>
			int value=1,limit=400,max=0;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
			float volt_a=500;
 8001c00:	4b56      	ldr	r3, [pc, #344]	; (8001d5c <start_up+0x304>)
 8001c02:	60fb      	str	r3, [r7, #12]
			HAL_ADCEx_Calibration_Start(&hadc1);
 8001c04:	4856      	ldr	r0, [pc, #344]	; (8001d60 <start_up+0x308>)
 8001c06:	f001 fa45 	bl	8003094 <HAL_ADCEx_Calibration_Start>
			while((((int)volt_a)>limit) && Menu!=1)
 8001c0a:	e064      	b.n	8001cd6 <start_up+0x27e>
			{
				SetCursor(1, 6, 21);
 8001c0c:	2215      	movs	r2, #21
 8001c0e:	2106      	movs	r1, #6
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7fe fde3 	bl	80007dc <SetCursor>
				Print("   ");
 8001c16:	4853      	ldr	r0, [pc, #332]	; (8001d64 <start_up+0x30c>)
 8001c18:	f7fe feda 	bl	80009d0 <Print>
				HAL_Delay(1);
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f000 fde9 	bl	80027f4 <HAL_Delay>

				HAL_ADC_Start(&hadc1);
 8001c22:	484f      	ldr	r0, [pc, #316]	; (8001d60 <start_up+0x308>)
 8001c24:	f000 fee2 	bl	80029ec <HAL_ADC_Start>
				for(int i=0;i<1000;i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	e017      	b.n	8001c5e <start_up+0x206>
				{
				  HAL_ADC_PollForConversion(&hadc1, 1);
 8001c2e:	2101      	movs	r1, #1
 8001c30:	484b      	ldr	r0, [pc, #300]	; (8001d60 <start_up+0x308>)
 8001c32:	f000 ff89 	bl	8002b48 <HAL_ADC_PollForConversion>
				  value+=HAL_ADC_GetValue(&hadc1);
 8001c36:	484a      	ldr	r0, [pc, #296]	; (8001d60 <start_up+0x308>)
 8001c38:	f001 f88c 	bl	8002d54 <HAL_ADC_GetValue>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4413      	add	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
				  if(Button_Menu_Esc)
 8001c44:	2108      	movs	r1, #8
 8001c46:	4840      	ldr	r0, [pc, #256]	; (8001d48 <start_up+0x2f0>)
 8001c48:	f001 fd32 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <start_up+0x200>
					  Menu=1;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <start_up+0x2e4>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<1000;i++)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c64:	dbe3      	blt.n	8001c2e <start_up+0x1d6>
				}
				value=value/1000;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4a3f      	ldr	r2, [pc, #252]	; (8001d68 <start_up+0x310>)
 8001c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6e:	1192      	asrs	r2, r2, #6
 8001c70:	17db      	asrs	r3, r3, #31
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	61bb      	str	r3, [r7, #24]
				volt_a=(((float)value*(float)0.00080586)*(float)1000.0);
 8001c76:	69b8      	ldr	r0, [r7, #24]
 8001c78:	f7fe fb2a 	bl	80002d0 <__aeabi_i2f>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	493b      	ldr	r1, [pc, #236]	; (8001d6c <start_up+0x314>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fb79 	bl	8000378 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4939      	ldr	r1, [pc, #228]	; (8001d70 <start_up+0x318>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fb74 	bl	8000378 <__aeabi_fmul>
 8001c90:	4603      	mov	r3, r0
 8001c92:	60fb      	str	r3, [r7, #12]
				if(max<(int)volt_a)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7fe fcbf 	bl	8000618 <__aeabi_f2iz>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	da04      	bge.n	8001cac <start_up+0x254>
					max=(int)volt_a;
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f7fe fcb8 	bl	8000618 <__aeabi_f2iz>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	613b      	str	r3, [r7, #16]
				if((int)volt_a>600)
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f7fe fcb3 	bl	8000618 <__aeabi_f2iz>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001cb8:	dd02      	ble.n	8001cc0 <start_up+0x268>
				  limit=770;
 8001cba:	f240 3302 	movw	r3, #770	; 0x302
 8001cbe:	617b      	str	r3, [r7, #20]

				SetCursor(1, 6, 21);
 8001cc0:	2215      	movs	r2, #21
 8001cc2:	2106      	movs	r1, #6
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7fe fd89 	bl	80007dc <SetCursor>
				Print("...");
 8001cca:	482a      	ldr	r0, [pc, #168]	; (8001d74 <start_up+0x31c>)
 8001ccc:	f7fe fe80 	bl	80009d0 <Print>
				HAL_Delay(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f000 fd8f 	bl	80027f4 <HAL_Delay>
			while((((int)volt_a)>limit) && Menu!=1)
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7fe fc9e 	bl	8000618 <__aeabi_f2iz>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	da03      	bge.n	8001cec <start_up+0x294>
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <start_up+0x2e4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d18f      	bne.n	8001c0c <start_up+0x1b4>
			  }

			if(Menu==1)
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <start_up+0x2e4>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d143      	bne.n	8001d7c <start_up+0x324>
			{
				if(test!=0)
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <start_up+0x2d8>)
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <start_up+0x2b8>
					test--;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <start_up+0x2d8>)
 8001d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <start_up+0x2d8>)
 8001d0e:	801a      	strh	r2, [r3, #0]
				Blank(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f000 f90d 	bl	8001f30 <Blank>
				SetCursor(0, 6, 5);
 8001d16:	2205      	movs	r2, #5
 8001d18:	2106      	movs	r1, #6
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7fe fd5e 	bl	80007dc <SetCursor>
				Print("      CANCLED     ");
 8001d20:	4815      	ldr	r0, [pc, #84]	; (8001d78 <start_up+0x320>)
 8001d22:	f7fe fe55 	bl	80009d0 <Print>
				HAL_Delay(1000);
 8001d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d2a:	f000 fd63 	bl	80027f4 <HAL_Delay>
 8001d2e:	e02a      	b.n	8001d86 <start_up+0x32e>
 8001d30:	20000078 	.word	0x20000078
 8001d34:	08004618 	.word	0x08004618
 8001d38:	0800462c 	.word	0x0800462c
 8001d3c:	20000077 	.word	0x20000077
 8001d40:	08004640 	.word	0x08004640
 8001d44:	080045dc 	.word	0x080045dc
 8001d48:	40010c00 	.word	0x40010c00
 8001d4c:	08004650 	.word	0x08004650
 8001d50:	08004664 	.word	0x08004664
 8001d54:	08004668 	.word	0x08004668
 8001d58:	08004670 	.word	0x08004670
 8001d5c:	43fa0000 	.word	0x43fa0000
 8001d60:	2000007c 	.word	0x2000007c
 8001d64:	08004684 	.word	0x08004684
 8001d68:	10624dd3 	.word	0x10624dd3
 8001d6c:	3a534059 	.word	0x3a534059
 8001d70:	447a0000 	.word	0x447a0000
 8001d74:	08004688 	.word	0x08004688
 8001d78:	0800468c 	.word	0x0800468c
			}
			else
				Conversition(max);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 f9a1 	bl	80020c8 <Conversition>
			Menu=0;
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <start_up+0x458>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
		if(test<10)
 8001d8c:	e082      	b.n	8001e94 <start_up+0x43c>
		}
	}
	else if(Button_Down_Result || Menu==3)
 8001d8e:	2120      	movs	r1, #32
 8001d90:	4848      	ldr	r0, [pc, #288]	; (8001eb4 <start_up+0x45c>)
 8001d92:	f001 fc8d 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <start_up+0x34c>
 8001d9c:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <start_up+0x458>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d16a      	bne.n	8001e7a <start_up+0x422>
	{
		while(Button_Down_Result);
 8001da4:	bf00      	nop
 8001da6:	2120      	movs	r1, #32
 8001da8:	4842      	ldr	r0, [pc, #264]	; (8001eb4 <start_up+0x45c>)
 8001daa:	f001 fc81 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f8      	bne.n	8001da6 <start_up+0x34e>
		if(test!=0)
 8001db4:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <start_up+0x460>)
 8001db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d06a      	beq.n	8001e94 <start_up+0x43c>
		{
			Clear();
 8001dbe:	f7fe fcd5 	bl	800076c <Clear>
			char  move=2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	71fb      	strb	r3, [r7, #7]
			Result();
 8001dc6:	f7ff fb21 	bl	800140c <Result>
			Move(move,"NEW","PRINT");
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4a3b      	ldr	r2, [pc, #236]	; (8001ebc <start_up+0x464>)
 8001dce:	493c      	ldr	r1, [pc, #240]	; (8001ec0 <start_up+0x468>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe ff7b 	bl	8000ccc <Move>
			while(!(Button_Menu_Esc) && (move&2))
 8001dd6:	e039      	b.n	8001e4c <start_up+0x3f4>
			{
				if(Button_Move)
 8001dd8:	2140      	movs	r1, #64	; 0x40
 8001dda:	4836      	ldr	r0, [pc, #216]	; (8001eb4 <start_up+0x45c>)
 8001ddc:	f001 fc68 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <start_up+0x3a2>
				{
					move^=1<<0;
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f083 0301 	eor.w	r3, r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]
					Move(move,"NEW","PRINT");
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4a32      	ldr	r2, [pc, #200]	; (8001ebc <start_up+0x464>)
 8001df2:	4933      	ldr	r1, [pc, #204]	; (8001ec0 <start_up+0x468>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe ff69 	bl	8000ccc <Move>
				}
				while(Button_Move);
 8001dfa:	bf00      	nop
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	482d      	ldr	r0, [pc, #180]	; (8001eb4 <start_up+0x45c>)
 8001e00:	f001 fc56 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f8      	bne.n	8001dfc <start_up+0x3a4>
				if(Button_Test_Enter)
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	4829      	ldr	r0, [pc, #164]	; (8001eb4 <start_up+0x45c>)
 8001e0e:	f001 fc4f 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <start_up+0x3f4>
				{
					while(Button_Test_Enter);
 8001e18:	bf00      	nop
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	4825      	ldr	r0, [pc, #148]	; (8001eb4 <start_up+0x45c>)
 8001e1e:	f001 fc47 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f8      	bne.n	8001e1a <start_up+0x3c2>
					if((move & 1)==0)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <start_up+0x3e6>
						move=test=0;
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <start_up+0x460>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	e006      	b.n	8001e4c <start_up+0x3f4>
					else if((move & 1)==1)
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <start_up+0x3f4>
						printer();
 8001e48:	f7ff fb7a 	bl	8001540 <printer>
			while(!(Button_Menu_Esc) && (move&2))
 8001e4c:	2108      	movs	r1, #8
 8001e4e:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <start_up+0x45c>)
 8001e50:	f001 fc2e 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <start_up+0x40c>
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1b9      	bne.n	8001dd8 <start_up+0x380>
				}
			}
			Clear();
 8001e64:	f7fe fc82 	bl	800076c <Clear>
			Test_Mode();
 8001e68:	f000 f8b8 	bl	8001fdc <Test_Mode>
			Blank(1);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f000 f85f 	bl	8001f30 <Blank>
			Menu=0;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <start_up+0x458>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
		if(test!=0)
 8001e78:	e00c      	b.n	8001e94 <start_up+0x43c>
		}
	}
	else if(Button_UP_Delete || Menu==4)
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <start_up+0x45c>)
 8001e7e:	f001 fc17 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <start_up+0x438>
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <start_up+0x458>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d101      	bne.n	8001e94 <start_up+0x43c>
		Delete();
 8001e90:	f000 f818 	bl	8001ec4 <Delete>
	while(Button_UP_Delete);
 8001e94:	bf00      	nop
 8001e96:	2110      	movs	r1, #16
 8001e98:	4806      	ldr	r0, [pc, #24]	; (8001eb4 <start_up+0x45c>)
 8001e9a:	f001 fc09 	bl	80036b0 <HAL_GPIO_ReadPin>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f8      	bne.n	8001e96 <start_up+0x43e>

}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000077 	.word	0x20000077
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	20000078 	.word	0x20000078
 8001ebc:	080046a0 	.word	0x080046a0
 8001ec0:	080046a8 	.word	0x080046a8

08001ec4 <Delete>:
void Delete()
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	Menu=0;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <Delete+0x5c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	if(test!=0)
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <Delete+0x60>)
 8001ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <Delete+0x26>
		test--;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <Delete+0x60>)
 8001eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <Delete+0x60>)
 8001ee8:	801a      	strh	r2, [r3, #0]
	SetCursor(0, 6, 5);
 8001eea:	2205      	movs	r2, #5
 8001eec:	2106      	movs	r1, #6
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7fe fc74 	bl	80007dc <SetCursor>
	Print("    Deleting...   ");
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <Delete+0x64>)
 8001ef6:	f7fe fd6b 	bl	80009d0 <Print>
	HAL_Delay(5);
 8001efa:	2005      	movs	r0, #5
 8001efc:	f000 fc7a 	bl	80027f4 <HAL_Delay>
	SetCursor(0, 6, 30);
 8001f00:	221e      	movs	r2, #30
 8001f02:	2106      	movs	r1, #6
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7fe fc69 	bl	80007dc <SetCursor>
	Print("           ");
 8001f0a:	4808      	ldr	r0, [pc, #32]	; (8001f2c <Delete+0x68>)
 8001f0c:	f7fe fd60 	bl	80009d0 <Print>
	HAL_Delay(5);
 8001f10:	2005      	movs	r0, #5
 8001f12:	f000 fc6f 	bl	80027f4 <HAL_Delay>
	Blank(1);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 f80a 	bl	8001f30 <Blank>

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000077 	.word	0x20000077
 8001f24:	20000078 	.word	0x20000078
 8001f28:	080046ac 	.word	0x080046ac
 8001f2c:	080046c0 	.word	0x080046c0

08001f30 <Blank>:
void Blank(char init)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	SetCursor(0, 4, 30);
 8001f3a:	221e      	movs	r2, #30
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7fe fc4c 	bl	80007dc <SetCursor>
	if(test<10)
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <Blank+0x90>)
 8001f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4a:	2b09      	cmp	r3, #9
 8001f4c:	dc0e      	bgt.n	8001f6c <Blank+0x3c>
	{
		Print("0");
 8001f4e:	481d      	ldr	r0, [pc, #116]	; (8001fc4 <Blank+0x94>)
 8001f50:	f7fe fd3e 	bl	80009d0 <Print>
		Number(test, 0);
 8001f54:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <Blank+0x90>)
 8001f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe f9b8 	bl	80002d0 <__aeabi_i2f>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fdf9 	bl	8000b5c <Number>
 8001f6a:	e002      	b.n	8001f72 <Blank+0x42>
	}
	else
		Print("10");
 8001f6c:	4816      	ldr	r0, [pc, #88]	; (8001fc8 <Blank+0x98>)
 8001f6e:	f7fe fd2f 	bl	80009d0 <Print>
	Print(":");
 8001f72:	4816      	ldr	r0, [pc, #88]	; (8001fcc <Blank+0x9c>)
 8001f74:	f7fe fd2c 	bl	80009d0 <Print>

	SetCursor(0, 4, 52);
 8001f78:	2234      	movs	r2, #52	; 0x34
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7fe fc2d 	bl	80007dc <SetCursor>

	if(init==0||test==0)
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <Blank+0x62>
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <Blank+0x90>)
 8001f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d103      	bne.n	8001f9a <Blank+0x6a>
		Print("    ");
 8001f92:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <Blank+0xa0>)
 8001f94:	f7fe fd1c 	bl	80009d0 <Print>
 8001f98:	e00a      	b.n	8001fb0 <Blank+0x80>
	else
		Number(mic_value[test-1],2);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <Blank+0x90>)
 8001f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <Blank+0xa4>)
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fdd6 	bl	8000b5c <Number>
	Print(" ug/inch");
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <Blank+0xa8>)
 8001fb2:	f7fe fd0d 	bl	80009d0 <Print>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000078 	.word	0x20000078
 8001fc4:	080044cc 	.word	0x080044cc
 8001fc8:	0800451c 	.word	0x0800451c
 8001fcc:	080046cc 	.word	0x080046cc
 8001fd0:	080046d0 	.word	0x080046d0
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	080046d8 	.word	0x080046d8

08001fdc <Test_Mode>:
void Test_Mode()
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	SetCursor(0, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7fe fbf9 	bl	80007dc <SetCursor>
	Print(name);
 8001fea:	480e      	ldr	r0, [pc, #56]	; (8002024 <Test_Mode+0x48>)
 8001fec:	f7fe fcf0 	bl	80009d0 <Print>
	SetCursor(0, 2, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7fe fbf1 	bl	80007dc <SetCursor>
	Print("LOT NO :");
 8001ffa:	480b      	ldr	r0, [pc, #44]	; (8002028 <Test_Mode+0x4c>)
 8001ffc:	f7fe fce8 	bl	80009d0 <Print>
	SetCursor(0, 2, 52);
 8002000:	2234      	movs	r2, #52	; 0x34
 8002002:	2102      	movs	r1, #2
 8002004:	2000      	movs	r0, #0
 8002006:	f7fe fbe9 	bl	80007dc <SetCursor>
	Print(Lot);
 800200a:	4808      	ldr	r0, [pc, #32]	; (800202c <Test_Mode+0x50>)
 800200c:	f7fe fce0 	bl	80009d0 <Print>
	SetCursor(0, 4, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2104      	movs	r1, #4
 8002014:	2000      	movs	r0, #0
 8002016:	f7fe fbe1 	bl	80007dc <SetCursor>
	Print("TEST-");
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <Test_Mode+0x54>)
 800201c:	f7fe fcd8 	bl	80009d0 <Print>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000060 	.word	0x20000060
 8002028:	080046e4 	.word	0x080046e4
 800202c:	20000000 	.word	0x20000000
 8002030:	080046f0 	.word	0x080046f0

08002034 <Mic_conversition>:

void Mic_conversition(float mic,int Volt,int min,float multiplier)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
	float find =(((float)(Volt - min)) * multiplier);
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f941 	bl	80002d0 <__aeabi_i2f>
 800204e:	4603      	mov	r3, r0
 8002050:	4619      	mov	r1, r3
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	f7fe f990 	bl	8000378 <__aeabi_fmul>
 8002058:	4603      	mov	r3, r0
 800205a:	617b      	str	r3, [r7, #20]
	mic_value[test-1]=mic-=((int)find/(float)10.0);
 800205c:	6978      	ldr	r0, [r7, #20]
 800205e:	f7fe fadb 	bl	8000618 <__aeabi_f2iz>
 8002062:	4603      	mov	r3, r0
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe f933 	bl	80002d0 <__aeabi_i2f>
 800206a:	4603      	mov	r3, r0
 800206c:	4912      	ldr	r1, [pc, #72]	; (80020b8 <Mic_conversition+0x84>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa36 	bl	80004e0 <__aeabi_fdiv>
 8002074:	4603      	mov	r3, r0
 8002076:	4619      	mov	r1, r3
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7fe f873 	bl	8000164 <__aeabi_fsub>
 800207e:	4603      	mov	r3, r0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <Mic_conversition+0x88>)
 8002084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002088:	3b01      	subs	r3, #1
 800208a:	490d      	ldr	r1, [pc, #52]	; (80020c0 <Mic_conversition+0x8c>)
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Blank(1);
 8002092:	2001      	movs	r0, #1
 8002094:	f7ff ff4c 	bl	8001f30 <Blank>
	SetCursor(0, 6, 5);
 8002098:	2205      	movs	r2, #5
 800209a:	2106      	movs	r1, #6
 800209c:	2000      	movs	r0, #0
 800209e:	f7fe fb9d 	bl	80007dc <SetCursor>
	Print("        OK        ");
 80020a2:	4808      	ldr	r0, [pc, #32]	; (80020c4 <Mic_conversition+0x90>)
 80020a4:	f7fe fc94 	bl	80009d0 <Print>
	HAL_Delay(1000);
 80020a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ac:	f000 fba2 	bl	80027f4 <HAL_Delay>
}
 80020b0:	bf00      	nop
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	41200000 	.word	0x41200000
 80020bc:	20000078 	.word	0x20000078
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	080046f8 	.word	0x080046f8

080020c8 <Conversition>:

void Conversition(short int Volt)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]

	if(Volt <= 1620 && Volt >=1532)
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	f240 6254 	movw	r2, #1620	; 0x654
 80020da:	4293      	cmp	r3, r2
 80020dc:	dc0e      	bgt.n	80020fc <Conversition+0x34>
 80020de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e2:	f240 52fb 	movw	r2, #1531	; 0x5fb
 80020e6:	4293      	cmp	r3, r2
 80020e8:	dd08      	ble.n	80020fc <Conversition+0x34>
		Mic_conversition(2.6, Volt, 1532, 0.0714);
 80020ea:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80020ee:	4b3c      	ldr	r3, [pc, #240]	; (80021e0 <Conversition+0x118>)
 80020f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80020f4:	483b      	ldr	r0, [pc, #236]	; (80021e4 <Conversition+0x11c>)
 80020f6:	f7ff ff9d 	bl	8002034 <Mic_conversition>
 80020fa:	e06c      	b.n	80021d6 <Conversition+0x10e>

	else if(Volt <= 1531 && Volt >=1415)
 80020fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002100:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8002104:	4293      	cmp	r3, r2
 8002106:	dc0e      	bgt.n	8002126 <Conversition+0x5e>
 8002108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210c:	f240 5286 	movw	r2, #1414	; 0x586
 8002110:	4293      	cmp	r3, r2
 8002112:	dd08      	ble.n	8002126 <Conversition+0x5e>
		Mic_conversition(3.5, Volt, 1415, 0.0775);
 8002114:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002118:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <Conversition+0x120>)
 800211a:	f240 5287 	movw	r2, #1415	; 0x587
 800211e:	4833      	ldr	r0, [pc, #204]	; (80021ec <Conversition+0x124>)
 8002120:	f7ff ff88 	bl	8002034 <Mic_conversition>
 8002124:	e057      	b.n	80021d6 <Conversition+0x10e>

	else if(Volt <=1414  && Volt >=1235)
 8002126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212a:	f240 5286 	movw	r2, #1414	; 0x586
 800212e:	4293      	cmp	r3, r2
 8002130:	dc0e      	bgt.n	8002150 <Conversition+0x88>
 8002132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002136:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800213a:	4293      	cmp	r3, r2
 800213c:	dd08      	ble.n	8002150 <Conversition+0x88>
		Mic_conversition(5.0, Volt, 1235, 0.0838);
 800213e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <Conversition+0x128>)
 8002144:	f240 42d3 	movw	r2, #1235	; 0x4d3
 8002148:	482a      	ldr	r0, [pc, #168]	; (80021f4 <Conversition+0x12c>)
 800214a:	f7ff ff73 	bl	8002034 <Mic_conversition>
 800214e:	e042      	b.n	80021d6 <Conversition+0x10e>

	else if(Volt <= 1234 && Volt >=1175)
 8002150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002154:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8002158:	4293      	cmp	r3, r2
 800215a:	dc0e      	bgt.n	800217a <Conversition+0xb2>
 800215c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002160:	f240 4296 	movw	r2, #1174	; 0x496
 8002164:	4293      	cmp	r3, r2
 8002166:	dd08      	ble.n	800217a <Conversition+0xb2>
		Mic_conversition(5.6, Volt, 1175, 0.1017);
 8002168:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <Conversition+0x130>)
 800216e:	f240 4297 	movw	r2, #1175	; 0x497
 8002172:	4822      	ldr	r0, [pc, #136]	; (80021fc <Conversition+0x134>)
 8002174:	f7ff ff5e 	bl	8002034 <Mic_conversition>
 8002178:	e02d      	b.n	80021d6 <Conversition+0x10e>

	else if(Volt <= 1174 && Volt >=1093)
 800217a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217e:	f240 4296 	movw	r2, #1174	; 0x496
 8002182:	4293      	cmp	r3, r2
 8002184:	dc0e      	bgt.n	80021a4 <Conversition+0xdc>
 8002186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218a:	f240 4244 	movw	r2, #1092	; 0x444
 800218e:	4293      	cmp	r3, r2
 8002190:	dd08      	ble.n	80021a4 <Conversition+0xdc>
		Mic_conversition(6.5, Volt, 1093, 0.1111);
 8002192:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <Conversition+0x138>)
 8002198:	f240 4245 	movw	r2, #1093	; 0x445
 800219c:	4819      	ldr	r0, [pc, #100]	; (8002204 <Conversition+0x13c>)
 800219e:	f7ff ff49 	bl	8002034 <Mic_conversition>
 80021a2:	e018      	b.n	80021d6 <Conversition+0x10e>

	else
	{
		SetCursor(0, 6, 5);
 80021a4:	2205      	movs	r2, #5
 80021a6:	2106      	movs	r1, #6
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7fe fb17 	bl	80007dc <SetCursor>
		Print("     REJECTED     ");
 80021ae:	4816      	ldr	r0, [pc, #88]	; (8002208 <Conversition+0x140>)
 80021b0:	f7fe fc0e 	bl	80009d0 <Print>
		test--;
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <Conversition+0x144>)
 80021b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <Conversition+0x144>)
 80021c4:	801a      	strh	r2, [r3, #0]
		Blank(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7ff feb2 	bl	8001f30 <Blank>
		HAL_Delay(1000);
 80021cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d0:	f000 fb10 	bl	80027f4 <HAL_Delay>
	}
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	3d923a2a 	.word	0x3d923a2a
 80021e4:	40266666 	.word	0x40266666
 80021e8:	3d9eb852 	.word	0x3d9eb852
 80021ec:	40600000 	.word	0x40600000
 80021f0:	3dab9f56 	.word	0x3dab9f56
 80021f4:	40a00000 	.word	0x40a00000
 80021f8:	3dd04817 	.word	0x3dd04817
 80021fc:	40b33333 	.word	0x40b33333
 8002200:	3de38866 	.word	0x3de38866
 8002204:	40d00000 	.word	0x40d00000
 8002208:	0800470c 	.word	0x0800470c
 800220c:	20000078 	.word	0x20000078

08002210 <Heading>:
#include "printer_Header.h"

void Heading(char Text)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
    char Heading_Font[]={0x1D,0x21,Text};
 800221a:	231d      	movs	r3, #29
 800221c:	733b      	strb	r3, [r7, #12]
 800221e:	2321      	movs	r3, #33	; 0x21
 8002220:	737b      	strb	r3, [r7, #13]
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&huart1,(uint8_t*) Heading_Font,sizeof(Heading_Font), 100);
 8002226:	f107 010c 	add.w	r1, r7, #12
 800222a:	2364      	movs	r3, #100	; 0x64
 800222c:	2203      	movs	r2, #3
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <Heading+0x2c>)
 8002230:	f001 ff84 	bl	800413c <HAL_UART_Transmit>
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200000ac 	.word	0x200000ac

08002240 <string>:

void string(char *Print_Data)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,Print_Data, strlen(Print_Data), 100);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7fd ff7f 	bl	800014c <strlen>
 800224e:	4603      	mov	r3, r0
 8002250:	b29a      	uxth	r2, r3
 8002252:	2364      	movs	r3, #100	; 0x64
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4803      	ldr	r0, [pc, #12]	; (8002264 <string+0x24>)
 8002258:	f001 ff70 	bl	800413c <HAL_UART_Transmit>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200000ac 	.word	0x200000ac

08002268 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_ADC1_Init+0x74>)
 800227a:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <MX_ADC1_Init+0x78>)
 800227c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <MX_ADC1_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_ADC1_Init+0x74>)
 8002286:	2201      	movs	r2, #1
 8002288:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_ADC1_Init+0x74>)
 800228c:	2200      	movs	r2, #0
 800228e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_ADC1_Init+0x74>)
 8002292:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_ADC1_Init+0x74>)
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_ADC1_Init+0x74>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <MX_ADC1_Init+0x74>)
 80022a6:	f000 fac9 	bl	800283c <HAL_ADC_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80022b0:	f000 f93d 	bl	800252e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80022b4:	2308      	movs	r3, #8
 80022b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80022bc:	2307      	movs	r3, #7
 80022be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_ADC1_Init+0x74>)
 80022c6:	f000 fd51 	bl	8002d6c <HAL_ADC_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80022d0:	f000 f92d 	bl	800252e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000007c 	.word	0x2000007c
 80022e0:	40012400 	.word	0x40012400

080022e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a14      	ldr	r2, [pc, #80]	; (8002350 <HAL_ADC_MspInit+0x6c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d121      	bne.n	8002348 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_ADC_MspInit+0x70>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_ADC_MspInit+0x70>)
 800230a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <HAL_ADC_MspInit+0x70>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_ADC_MspInit+0x70>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <HAL_ADC_MspInit+0x70>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_ADC_MspInit+0x70>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002334:	2301      	movs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002338:	2303      	movs	r3, #3
 800233a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <HAL_ADC_MspInit+0x74>)
 8002344:	f001 f838 	bl	80033b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40012400 	.word	0x40012400
 8002354:	40021000 	.word	0x40021000
 8002358:	40010c00 	.word	0x40010c00

0800235c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002370:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <MX_GPIO_Init+0x10c>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a3c      	ldr	r2, [pc, #240]	; (8002468 <MX_GPIO_Init+0x10c>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <MX_GPIO_Init+0x10c>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <MX_GPIO_Init+0x10c>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a36      	ldr	r2, [pc, #216]	; (8002468 <MX_GPIO_Init+0x10c>)
 800238e:	f043 0320 	orr.w	r3, r3, #32
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b34      	ldr	r3, [pc, #208]	; (8002468 <MX_GPIO_Init+0x10c>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <MX_GPIO_Init+0x10c>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a30      	ldr	r2, [pc, #192]	; (8002468 <MX_GPIO_Init+0x10c>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <MX_GPIO_Init+0x10c>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <MX_GPIO_Init+0x10c>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <MX_GPIO_Init+0x10c>)
 80023be:	f043 0308 	orr.w	r3, r3, #8
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <MX_GPIO_Init+0x10c>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80023d6:	4825      	ldr	r0, [pc, #148]	; (800246c <MX_GPIO_Init+0x110>)
 80023d8:	f001 f981 	bl	80036de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80023dc:	2200      	movs	r2, #0
 80023de:	21ff      	movs	r1, #255	; 0xff
 80023e0:	4823      	ldr	r0, [pc, #140]	; (8002470 <MX_GPIO_Init+0x114>)
 80023e2:	f001 f97c 	bl	80036de <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2102      	movs	r1, #2
 80023ea:	4822      	ldr	r0, [pc, #136]	; (8002474 <MX_GPIO_Init+0x118>)
 80023ec:	f001 f977 	bl	80036de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023f0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2302      	movs	r3, #2
 8002400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	4619      	mov	r1, r3
 8002408:	4818      	ldr	r0, [pc, #96]	; (800246c <MX_GPIO_Init+0x110>)
 800240a:	f000 ffd5 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800240e:	23ff      	movs	r3, #255	; 0xff
 8002410:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2302      	movs	r3, #2
 800241c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 0310 	add.w	r3, r7, #16
 8002422:	4619      	mov	r1, r3
 8002424:	4812      	ldr	r0, [pc, #72]	; (8002470 <MX_GPIO_Init+0x114>)
 8002426:	f000 ffc7 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800242a:	2302      	movs	r3, #2
 800242c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2302      	movs	r3, #2
 8002438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	4619      	mov	r1, r3
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <MX_GPIO_Init+0x118>)
 8002442:	f000 ffb9 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002446:	23f8      	movs	r3, #248	; 0xf8
 8002448:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4619      	mov	r1, r3
 8002458:	4806      	ldr	r0, [pc, #24]	; (8002474 <MX_GPIO_Init+0x118>)
 800245a:	f000 ffad 	bl	80033b8 <HAL_GPIO_Init>

}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	40011000 	.word	0x40011000
 8002470:	40010800 	.word	0x40010800
 8002474:	40010c00 	.word	0x40010c00

08002478 <main>:
#include "Printer_Header.h"

void SystemClock_Config(void);

int main(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0

  HAL_Init();
 800247c:	f000 f958 	bl	8002730 <HAL_Init>

  SystemClock_Config();
 8002480:	f000 f810 	bl	80024a4 <SystemClock_Config>

  MX_GPIO_Init();
 8002484:	f7ff ff6a 	bl	800235c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002488:	f7ff feee 	bl	8002268 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800248c:	f000 f8b4 	bl	80025f8 <MX_USART1_UART_Init>
//  MX_I2C1_Init();

  LCD_Init();
 8002490:	f7fe f964 	bl	800075c <LCD_Init>
//  HAL_I2C_Mem_Read(&hi2c1, 0xA1, 0x00, 1, &name, 21, 1000);
//  SetCursor(0, 0, 10);
//  Print("ASHER INSTRUMENTS");
//  HAL_Delay(1000);
//  Clear();
  Test_Mode();
 8002494:	f7ff fda2 	bl	8001fdc <Test_Mode>
  Blank(0);
 8002498:	2000      	movs	r0, #0
 800249a:	f7ff fd49 	bl	8001f30 <Blank>
while (1)
  {
	start_up();
 800249e:	f7ff fadb 	bl	8001a58 <start_up>
  {
 80024a2:	e7fc      	b.n	800249e <main+0x26>

080024a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b090      	sub	sp, #64	; 0x40
 80024a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	2228      	movs	r2, #40	; 0x28
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 ffe6 	bl	8004484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d4:	2301      	movs	r3, #1
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d8:	2302      	movs	r3, #2
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e8:	f107 0318 	add.w	r3, r7, #24
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 f90f 	bl	8003710 <HAL_RCC_OscConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80024f8:	f000 f819 	bl	800252e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fc:	230f      	movs	r3, #15
 80024fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002500:	2302      	movs	r3, #2
 8002502:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800250c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	2102      	movs	r1, #2
 8002516:	4618      	mov	r0, r3
 8002518:	f001 fb7c 	bl	8003c14 <HAL_RCC_ClockConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002522:	f000 f804 	bl	800252e <Error_Handler>
  }
}
 8002526:	bf00      	nop
 8002528:	3740      	adds	r7, #64	; 0x40
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002532:	b672      	cpsid	i
}
 8002534:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002536:	e7fe      	b.n	8002536 <Error_Handler+0x8>

08002538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_MspInit+0x5c>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	4a14      	ldr	r2, [pc, #80]	; (8002594 <HAL_MspInit+0x5c>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6193      	str	r3, [r2, #24]
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_MspInit+0x5c>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_MspInit+0x5c>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_MspInit+0x5c>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_MspInit+0x5c>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_MspInit+0x60>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_MspInit+0x60>)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40021000 	.word	0x40021000
 8002598:	40010000 	.word	0x40010000

0800259c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <NMI_Handler+0x4>

080025a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <HardFault_Handler+0x4>

080025a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <MemManage_Handler+0x4>

080025ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <UsageFault_Handler+0x4>

080025ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e2:	f000 f8eb 	bl	80027bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}

080025ea <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
	...

080025f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <MX_USART1_UART_Init+0x50>)
 8002600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002604:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_USART1_UART_Init+0x4c>)
 8002630:	f001 fd34 	bl	800409c <HAL_UART_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800263a:	f7ff ff78 	bl	800252e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200000ac 	.word	0x200000ac
 8002648:	40013800 	.word	0x40013800

0800264c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_UART_MspInit+0x8c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d131      	bne.n	80026d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_UART_MspInit+0x90>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_UART_MspInit+0x90>)
 8002672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_UART_MspInit+0x90>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_UART_MspInit+0x90>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <HAL_UART_MspInit+0x90>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_UART_MspInit+0x90>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800269c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a6:	2303      	movs	r3, #3
 80026a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	4619      	mov	r1, r3
 80026b0:	480b      	ldr	r0, [pc, #44]	; (80026e0 <HAL_UART_MspInit+0x94>)
 80026b2:	f000 fe81 	bl	80033b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4619      	mov	r1, r3
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <HAL_UART_MspInit+0x94>)
 80026cc:	f000 fe74 	bl	80033b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026d0:	bf00      	nop
 80026d2:	3720      	adds	r7, #32
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40013800 	.word	0x40013800
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40010800 	.word	0x40010800

080026e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e4:	f7ff ff81 	bl	80025ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026ea:	490c      	ldr	r1, [pc, #48]	; (800271c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026ec:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002700:	4c09      	ldr	r4, [pc, #36]	; (8002728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270e:	f001 fe95 	bl	800443c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002712:	f7ff feb1 	bl	8002478 <main>
  bx lr
 8002716:	4770      	bx	lr
  ldr r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800271c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8002720:	08004914 	.word	0x08004914
  ldr r2, =_sbss
 8002724:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8002728:	200000f8 	.word	0x200000f8

0800272c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC1_2_IRQHandler>
	...

08002730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_Init+0x28>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_Init+0x28>)
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 fe05 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002746:	200f      	movs	r0, #15
 8002748:	f000 f808 	bl	800275c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800274c:	f7ff fef4 	bl	8002538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40022000 	.word	0x40022000

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x54>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x58>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	fbb3 f3f1 	udiv	r3, r3, r1
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fe0f 	bl	800339e <HAL_SYSTICK_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d80a      	bhi.n	80027a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f000 fde5 	bl	8003366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_InitTick+0x5c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000034 	.word	0x20000034
 80027b4:	2000003c 	.word	0x2000003c
 80027b8:	20000038 	.word	0x20000038

080027bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_IncTick+0x1c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_IncTick+0x20>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a03      	ldr	r2, [pc, #12]	; (80027dc <HAL_IncTick+0x20>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	2000003c 	.word	0x2000003c
 80027dc:	200000f4 	.word	0x200000f4

080027e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b02      	ldr	r3, [pc, #8]	; (80027f0 <HAL_GetTick+0x10>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	200000f4 	.word	0x200000f4

080027f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d005      	beq.n	800281a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_Delay+0x44>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800281a:	bf00      	nop
 800281c:	f7ff ffe0 	bl	80027e0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d8f7      	bhi.n	800281c <HAL_Delay+0x28>
  {
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000003c 	.word	0x2000003c

0800283c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0be      	b.n	80029dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fd32 	bl	80022e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fbc5 	bl	8003010 <ADC_ConversionStop_Disable>
 8002886:	4603      	mov	r3, r0
 8002888:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 8099 	bne.w	80029ca <HAL_ADC_Init+0x18e>
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8095 	bne.w	80029ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028a8:	f023 0302 	bic.w	r3, r3, #2
 80028ac:	f043 0202 	orr.w	r2, r3, #2
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7b1b      	ldrb	r3, [r3, #12]
 80028c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d4:	d003      	beq.n	80028de <HAL_ADC_Init+0xa2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_ADC_Init+0xa8>
 80028de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e2:	e000      	b.n	80028e6 <HAL_ADC_Init+0xaa>
 80028e4:	2300      	movs	r3, #0
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7d1b      	ldrb	r3, [r3, #20]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d119      	bne.n	8002928 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7b1b      	ldrb	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	3b01      	subs	r3, #1
 8002902:	035a      	lsls	r2, r3, #13
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	e00b      	b.n	8002928 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_ADC_Init+0x1a8>)
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	430b      	orrs	r3, r1
 800294e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002958:	d003      	beq.n	8002962 <HAL_ADC_Init+0x126>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d104      	bne.n	800296c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	3b01      	subs	r3, #1
 8002968:	051b      	lsls	r3, r3, #20
 800296a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	430a      	orrs	r2, r1
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_ADC_Init+0x1ac>)
 8002988:	4013      	ands	r3, r2
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	429a      	cmp	r2, r3
 800298e:	d10b      	bne.n	80029a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029a6:	e018      	b.n	80029da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f023 0312 	bic.w	r3, r3, #18
 80029b0:	f043 0210 	orr.w	r2, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029c8:	e007      	b.n	80029da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029da:	7dfb      	ldrb	r3, [r7, #23]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	ffe1f7fd 	.word	0xffe1f7fd
 80029e8:	ff1f0efe 	.word	0xff1f0efe

080029ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_Start+0x1a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e098      	b.n	8002b38 <HAL_ADC_Start+0x14c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 faa4 	bl	8002f5c <ADC_Enable>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 8087 	bne.w	8002b2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_ADC_Start+0x154>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d105      	bne.n	8002a4a <HAL_ADC_Start+0x5e>
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_ADC_Start+0x158>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d115      	bne.n	8002a76 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d026      	beq.n	8002ab2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a74:	e01d      	b.n	8002ab2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2f      	ldr	r2, [pc, #188]	; (8002b44 <HAL_ADC_Start+0x158>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_Start+0xaa>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2b      	ldr	r2, [pc, #172]	; (8002b40 <HAL_ADC_Start+0x154>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10d      	bne.n	8002ab2 <HAL_ADC_Start+0xc6>
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_ADC_Start+0x158>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	f023 0206 	bic.w	r2, r3, #6
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aca:	e002      	b.n	8002ad2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0202 	mvn.w	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002aee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002af2:	d113      	bne.n	8002b1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002af8:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <HAL_ADC_Start+0x154>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d105      	bne.n	8002b0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_ADC_Start+0x158>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d108      	bne.n	8002b1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	e00c      	b.n	8002b36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40012800 	.word	0x40012800
 8002b44:	40012400 	.word	0x40012400

08002b48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b5e:	f7ff fe3f 	bl	80027e0 <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0d3      	b.n	8002d32 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d131      	bne.n	8002bfc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d12a      	bne.n	8002bfc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ba6:	e021      	b.n	8002bec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d01d      	beq.n	8002bec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_ADC_PollForConversion+0x7e>
 8002bb6:	f7ff fe13 	bl	80027e0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d212      	bcs.n	8002bec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f043 0204 	orr.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0a2      	b.n	8002d32 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0d6      	beq.n	8002ba8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bfa:	e070      	b.n	8002cde <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002bfc:	4b4f      	ldr	r3, [pc, #316]	; (8002d3c <HAL_ADC_PollForConversion+0x1f4>)
 8002bfe:	681c      	ldr	r4, [r3, #0]
 8002c00:	2002      	movs	r0, #2
 8002c02:	f001 f995 	bl	8003f30 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c06:	4603      	mov	r3, r0
 8002c08:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6919      	ldr	r1, [r3, #16]
 8002c12:	4b4b      	ldr	r3, [pc, #300]	; (8002d40 <HAL_ADC_PollForConversion+0x1f8>)
 8002c14:	400b      	ands	r3, r1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_ADC_PollForConversion+0x104>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68d9      	ldr	r1, [r3, #12]
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <HAL_ADC_PollForConversion+0x1fc>)
 8002c22:	400b      	ands	r3, r1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_ADC_PollForConversion+0x104>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_ADC_PollForConversion+0x200>)
 8002c30:	400b      	ands	r3, r1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x100>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68d9      	ldr	r1, [r3, #12]
 8002c3c:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <HAL_ADC_PollForConversion+0x204>)
 8002c3e:	400b      	ands	r3, r1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x100>
 8002c44:	2314      	movs	r3, #20
 8002c46:	e020      	b.n	8002c8a <HAL_ADC_PollForConversion+0x142>
 8002c48:	2329      	movs	r3, #41	; 0x29
 8002c4a:	e01e      	b.n	8002c8a <HAL_ADC_PollForConversion+0x142>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_ADC_PollForConversion+0x200>)
 8002c54:	400b      	ands	r3, r1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_ADC_PollForConversion+0x120>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68d9      	ldr	r1, [r3, #12]
 8002c60:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_ADC_PollForConversion+0x204>)
 8002c62:	400b      	ands	r3, r1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <HAL_ADC_PollForConversion+0x13c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6919      	ldr	r1, [r3, #16]
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_ADC_PollForConversion+0x208>)
 8002c70:	400b      	ands	r3, r1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d108      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x140>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68d9      	ldr	r1, [r3, #12]
 8002c7c:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_ADC_PollForConversion+0x208>)
 8002c7e:	400b      	ands	r3, r1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_PollForConversion+0x140>
 8002c84:	2354      	movs	r3, #84	; 0x54
 8002c86:	e000      	b.n	8002c8a <HAL_ADC_PollForConversion+0x142>
 8002c88:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c90:	e021      	b.n	8002cd6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d01a      	beq.n	8002cd0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_ADC_PollForConversion+0x168>
 8002ca0:	f7ff fd9e 	bl	80027e0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d20f      	bcs.n	8002cd0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d90b      	bls.n	8002cd0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	f043 0204 	orr.w	r2, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e030      	b.n	8002d32 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d8d9      	bhi.n	8002c92 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 0212 	mvn.w	r2, #18
 8002ce6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d02:	d115      	bne.n	8002d30 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d111      	bne.n	8002d30 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000034 	.word	0x20000034
 8002d40:	24924924 	.word	0x24924924
 8002d44:	00924924 	.word	0x00924924
 8002d48:	12492492 	.word	0x12492492
 8002d4c:	00492492 	.word	0x00492492
 8002d50:	00249249 	.word	0x00249249

08002d54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x20>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0dc      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x1da>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b06      	cmp	r3, #6
 8002d9a:	d81c      	bhi.n	8002dd6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3b05      	subs	r3, #5
 8002dae:	221f      	movs	r2, #31
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4019      	ands	r1, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b05      	subs	r3, #5
 8002dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd4:	e03c      	b.n	8002e50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d81c      	bhi.n	8002e18 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	3b23      	subs	r3, #35	; 0x23
 8002df0:	221f      	movs	r2, #31
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	4019      	ands	r1, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	3b23      	subs	r3, #35	; 0x23
 8002e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
 8002e16:	e01b      	b.n	8002e50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	3b41      	subs	r3, #65	; 0x41
 8002e2a:	221f      	movs	r2, #31
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	4019      	ands	r1, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	3b41      	subs	r3, #65	; 0x41
 8002e44:	fa00 f203 	lsl.w	r2, r0, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b09      	cmp	r3, #9
 8002e56:	d91c      	bls.n	8002e92 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	3b1e      	subs	r3, #30
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	4019      	ands	r1, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6898      	ldr	r0, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	3b1e      	subs	r3, #30
 8002e84:	fa00 f203 	lsl.w	r2, r0, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	e019      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6919      	ldr	r1, [r3, #16]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	4019      	ands	r1, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6898      	ldr	r0, [r3, #8]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d003      	beq.n	8002ed6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ed2:	2b11      	cmp	r3, #17
 8002ed4:	d132      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <HAL_ADC_ConfigChannel+0x1e4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d125      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d126      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002efc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d11a      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	0c9a      	lsrs	r2, r3, #18
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x1b2>
 8002f2a:	e007      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	40012400 	.word	0x40012400
 8002f54:	20000034 	.word	0x20000034
 8002f58:	431bde83 	.word	0x431bde83

08002f5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d040      	beq.n	8002ffc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <ADC_Enable+0xac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	; (800300c <ADC_Enable+0xb0>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	0c9b      	lsrs	r3, r3, #18
 8002f96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f98:	e002      	b.n	8002fa0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f9      	bne.n	8002f9a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fa6:	f7ff fc1b 	bl	80027e0 <HAL_GetTick>
 8002faa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fac:	e01f      	b.n	8002fee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fae:	f7ff fc17 	bl	80027e0 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d918      	bls.n	8002fee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d011      	beq.n	8002fee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e007      	b.n	8002ffe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d1d8      	bne.n	8002fae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000034 	.word	0x20000034
 800300c:	431bde83 	.word	0x431bde83

08003010 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d12e      	bne.n	8003088 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800303a:	f7ff fbd1 	bl	80027e0 <HAL_GetTick>
 800303e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003040:	e01b      	b.n	800307a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003042:	f7ff fbcd 	bl	80027e0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d914      	bls.n	800307a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d10d      	bne.n	800307a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e007      	b.n	800308a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d0dc      	beq.n	8003042 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e097      	b.n	80031e2 <HAL_ADCEx_Calibration_Start+0x14e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa8 	bl	8003010 <ADC_ConversionStop_Disable>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff49 	bl	8002f5c <ADC_Enable>
 80030ca:	4603      	mov	r3, r0
 80030cc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 8081 	bne.w	80031d8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030de:	f023 0302 	bic.w	r3, r3, #2
 80030e2:	f043 0202 	orr.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80030ea:	4b40      	ldr	r3, [pc, #256]	; (80031ec <HAL_ADCEx_Calibration_Start+0x158>)
 80030ec:	681c      	ldr	r4, [r3, #0]
 80030ee:	2002      	movs	r0, #2
 80030f0:	f000 ff1e 	bl	8003f30 <HAL_RCCEx_GetPeriphCLKFreq>
 80030f4:	4603      	mov	r3, r0
 80030f6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80030fa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80030fc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80030fe:	e002      	b.n	8003106 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f9      	bne.n	8003100 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0208 	orr.w	r2, r2, #8
 800311a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800311c:	f7ff fb60 	bl	80027e0 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003122:	e01b      	b.n	800315c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003124:	f7ff fb5c 	bl	80027e0 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d914      	bls.n	800315c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f023 0312 	bic.w	r3, r3, #18
 8003148:	f043 0210 	orr.w	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e042      	b.n	80031e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1dc      	bne.n	8003124 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0204 	orr.w	r2, r2, #4
 8003178:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800317a:	f7ff fb31 	bl	80027e0 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003180:	e01b      	b.n	80031ba <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003182:	f7ff fb2d 	bl	80027e0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b0a      	cmp	r3, #10
 800318e:	d914      	bls.n	80031ba <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	f023 0312 	bic.w	r3, r3, #18
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e013      	b.n	80031e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1dc      	bne.n	8003182 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	f023 0303 	bic.w	r3, r3, #3
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000034 	.word	0x20000034

080031f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800320c:	4013      	ands	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800321c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003222:	4a04      	ldr	r2, [pc, #16]	; (8003234 <__NVIC_SetPriorityGrouping+0x44>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	60d3      	str	r3, [r2, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <__NVIC_GetPriorityGrouping+0x18>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 0307 	and.w	r3, r3, #7
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db0a      	blt.n	800327e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	490c      	ldr	r1, [pc, #48]	; (80032a0 <__NVIC_SetPriority+0x4c>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	440b      	add	r3, r1
 8003278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800327c:	e00a      	b.n	8003294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4908      	ldr	r1, [pc, #32]	; (80032a4 <__NVIC_SetPriority+0x50>)
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	3b04      	subs	r3, #4
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	440b      	add	r3, r1
 8003292:	761a      	strb	r2, [r3, #24]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	; 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f1c3 0307 	rsb	r3, r3, #7
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	bf28      	it	cs
 80032c6:	2304      	movcs	r3, #4
 80032c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d902      	bls.n	80032d8 <NVIC_EncodePriority+0x30>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3b03      	subs	r3, #3
 80032d6:	e000      	b.n	80032da <NVIC_EncodePriority+0x32>
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	401a      	ands	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43d9      	mvns	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	4313      	orrs	r3, r2
         );
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f7ff ff90 	bl	8003254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff49 	bl	80031f0 <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff5e 	bl	8003238 <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff90 	bl	80032a8 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5f 	bl	8003254 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff ffb0 	bl	800330c <SysTick_Config>
 80033ac:	4603      	mov	r3, r0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b08b      	sub	sp, #44	; 0x2c
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ca:	e161      	b.n	8003690 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033cc:	2201      	movs	r2, #1
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f040 8150 	bne.w	800368a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4a97      	ldr	r2, [pc, #604]	; (800364c <HAL_GPIO_Init+0x294>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d05e      	beq.n	80034b2 <HAL_GPIO_Init+0xfa>
 80033f4:	4a95      	ldr	r2, [pc, #596]	; (800364c <HAL_GPIO_Init+0x294>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d875      	bhi.n	80034e6 <HAL_GPIO_Init+0x12e>
 80033fa:	4a95      	ldr	r2, [pc, #596]	; (8003650 <HAL_GPIO_Init+0x298>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d058      	beq.n	80034b2 <HAL_GPIO_Init+0xfa>
 8003400:	4a93      	ldr	r2, [pc, #588]	; (8003650 <HAL_GPIO_Init+0x298>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d86f      	bhi.n	80034e6 <HAL_GPIO_Init+0x12e>
 8003406:	4a93      	ldr	r2, [pc, #588]	; (8003654 <HAL_GPIO_Init+0x29c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d052      	beq.n	80034b2 <HAL_GPIO_Init+0xfa>
 800340c:	4a91      	ldr	r2, [pc, #580]	; (8003654 <HAL_GPIO_Init+0x29c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d869      	bhi.n	80034e6 <HAL_GPIO_Init+0x12e>
 8003412:	4a91      	ldr	r2, [pc, #580]	; (8003658 <HAL_GPIO_Init+0x2a0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d04c      	beq.n	80034b2 <HAL_GPIO_Init+0xfa>
 8003418:	4a8f      	ldr	r2, [pc, #572]	; (8003658 <HAL_GPIO_Init+0x2a0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d863      	bhi.n	80034e6 <HAL_GPIO_Init+0x12e>
 800341e:	4a8f      	ldr	r2, [pc, #572]	; (800365c <HAL_GPIO_Init+0x2a4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d046      	beq.n	80034b2 <HAL_GPIO_Init+0xfa>
 8003424:	4a8d      	ldr	r2, [pc, #564]	; (800365c <HAL_GPIO_Init+0x2a4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d85d      	bhi.n	80034e6 <HAL_GPIO_Init+0x12e>
 800342a:	2b12      	cmp	r3, #18
 800342c:	d82a      	bhi.n	8003484 <HAL_GPIO_Init+0xcc>
 800342e:	2b12      	cmp	r3, #18
 8003430:	d859      	bhi.n	80034e6 <HAL_GPIO_Init+0x12e>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <HAL_GPIO_Init+0x80>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	080034b3 	.word	0x080034b3
 800343c:	0800348d 	.word	0x0800348d
 8003440:	0800349f 	.word	0x0800349f
 8003444:	080034e1 	.word	0x080034e1
 8003448:	080034e7 	.word	0x080034e7
 800344c:	080034e7 	.word	0x080034e7
 8003450:	080034e7 	.word	0x080034e7
 8003454:	080034e7 	.word	0x080034e7
 8003458:	080034e7 	.word	0x080034e7
 800345c:	080034e7 	.word	0x080034e7
 8003460:	080034e7 	.word	0x080034e7
 8003464:	080034e7 	.word	0x080034e7
 8003468:	080034e7 	.word	0x080034e7
 800346c:	080034e7 	.word	0x080034e7
 8003470:	080034e7 	.word	0x080034e7
 8003474:	080034e7 	.word	0x080034e7
 8003478:	080034e7 	.word	0x080034e7
 800347c:	08003495 	.word	0x08003495
 8003480:	080034a9 	.word	0x080034a9
 8003484:	4a76      	ldr	r2, [pc, #472]	; (8003660 <HAL_GPIO_Init+0x2a8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800348a:	e02c      	b.n	80034e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	623b      	str	r3, [r7, #32]
          break;
 8003492:	e029      	b.n	80034e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	3304      	adds	r3, #4
 800349a:	623b      	str	r3, [r7, #32]
          break;
 800349c:	e024      	b.n	80034e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	3308      	adds	r3, #8
 80034a4:	623b      	str	r3, [r7, #32]
          break;
 80034a6:	e01f      	b.n	80034e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	330c      	adds	r3, #12
 80034ae:	623b      	str	r3, [r7, #32]
          break;
 80034b0:	e01a      	b.n	80034e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034ba:	2304      	movs	r3, #4
 80034bc:	623b      	str	r3, [r7, #32]
          break;
 80034be:	e013      	b.n	80034e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034c8:	2308      	movs	r3, #8
 80034ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	611a      	str	r2, [r3, #16]
          break;
 80034d2:	e009      	b.n	80034e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034d4:	2308      	movs	r3, #8
 80034d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	615a      	str	r2, [r3, #20]
          break;
 80034de:	e003      	b.n	80034e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034e0:	2300      	movs	r3, #0
 80034e2:	623b      	str	r3, [r7, #32]
          break;
 80034e4:	e000      	b.n	80034e8 <HAL_GPIO_Init+0x130>
          break;
 80034e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2bff      	cmp	r3, #255	; 0xff
 80034ec:	d801      	bhi.n	80034f2 <HAL_GPIO_Init+0x13a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	e001      	b.n	80034f6 <HAL_GPIO_Init+0x13e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2bff      	cmp	r3, #255	; 0xff
 80034fc:	d802      	bhi.n	8003504 <HAL_GPIO_Init+0x14c>
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	e002      	b.n	800350a <HAL_GPIO_Init+0x152>
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	3b08      	subs	r3, #8
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	210f      	movs	r1, #15
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	401a      	ands	r2, r3
 800351c:	6a39      	ldr	r1, [r7, #32]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	431a      	orrs	r2, r3
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a9 	beq.w	800368a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003538:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_GPIO_Init+0x2ac>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	4a49      	ldr	r2, [pc, #292]	; (8003664 <HAL_GPIO_Init+0x2ac>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6193      	str	r3, [r2, #24]
 8003544:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_GPIO_Init+0x2ac>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003550:	4a45      	ldr	r2, [pc, #276]	; (8003668 <HAL_GPIO_Init+0x2b0>)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	089b      	lsrs	r3, r3, #2
 8003556:	3302      	adds	r3, #2
 8003558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	220f      	movs	r2, #15
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3d      	ldr	r2, [pc, #244]	; (800366c <HAL_GPIO_Init+0x2b4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00d      	beq.n	8003598 <HAL_GPIO_Init+0x1e0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3c      	ldr	r2, [pc, #240]	; (8003670 <HAL_GPIO_Init+0x2b8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d007      	beq.n	8003594 <HAL_GPIO_Init+0x1dc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <HAL_GPIO_Init+0x2bc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_GPIO_Init+0x1d8>
 800358c:	2302      	movs	r3, #2
 800358e:	e004      	b.n	800359a <HAL_GPIO_Init+0x1e2>
 8003590:	2303      	movs	r3, #3
 8003592:	e002      	b.n	800359a <HAL_GPIO_Init+0x1e2>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_GPIO_Init+0x1e2>
 8003598:	2300      	movs	r3, #0
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	f002 0203 	and.w	r2, r2, #3
 80035a0:	0092      	lsls	r2, r2, #2
 80035a2:	4093      	lsls	r3, r2
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035aa:	492f      	ldr	r1, [pc, #188]	; (8003668 <HAL_GPIO_Init+0x2b0>)
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035c4:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	492b      	ldr	r1, [pc, #172]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]
 80035d0:	e006      	b.n	80035e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035d2:	4b29      	ldr	r3, [pc, #164]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	43db      	mvns	r3, r3
 80035da:	4927      	ldr	r1, [pc, #156]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 80035dc:	4013      	ands	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d006      	beq.n	80035fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035ec:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	4921      	ldr	r1, [pc, #132]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
 80035f8:	e006      	b.n	8003608 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	43db      	mvns	r3, r3
 8003602:	491d      	ldr	r1, [pc, #116]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 8003604:	4013      	ands	r3, r2
 8003606:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d006      	beq.n	8003622 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	4917      	ldr	r1, [pc, #92]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	43db      	mvns	r3, r3
 800362a:	4913      	ldr	r1, [pc, #76]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 800362c:	4013      	ands	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01f      	beq.n	800367c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	490d      	ldr	r1, [pc, #52]	; (8003678 <HAL_GPIO_Init+0x2c0>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e01f      	b.n	800368a <HAL_GPIO_Init+0x2d2>
 800364a:	bf00      	nop
 800364c:	10320000 	.word	0x10320000
 8003650:	10310000 	.word	0x10310000
 8003654:	10220000 	.word	0x10220000
 8003658:	10210000 	.word	0x10210000
 800365c:	10120000 	.word	0x10120000
 8003660:	10110000 	.word	0x10110000
 8003664:	40021000 	.word	0x40021000
 8003668:	40010000 	.word	0x40010000
 800366c:	40010800 	.word	0x40010800
 8003670:	40010c00 	.word	0x40010c00
 8003674:	40011000 	.word	0x40011000
 8003678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_GPIO_Init+0x2f4>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	43db      	mvns	r3, r3
 8003684:	4909      	ldr	r1, [pc, #36]	; (80036ac <HAL_GPIO_Init+0x2f4>)
 8003686:	4013      	ands	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	3301      	adds	r3, #1
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	f47f ae96 	bne.w	80033cc <HAL_GPIO_Init+0x14>
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	372c      	adds	r7, #44	; 0x2c
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40010400 	.word	0x40010400

080036b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e001      	b.n	80036d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	807b      	strh	r3, [r7, #2]
 80036ea:	4613      	mov	r3, r2
 80036ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ee:	787b      	ldrb	r3, [r7, #1]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f4:	887a      	ldrh	r2, [r7, #2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036fa:	e003      	b.n	8003704 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	041a      	lsls	r2, r3, #16
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	611a      	str	r2, [r3, #16]
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr
	...

08003710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e272      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8087 	beq.w	800383e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003730:	4b92      	ldr	r3, [pc, #584]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b04      	cmp	r3, #4
 800373a:	d00c      	beq.n	8003756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800373c:	4b8f      	ldr	r3, [pc, #572]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d112      	bne.n	800376e <HAL_RCC_OscConfig+0x5e>
 8003748:	4b8c      	ldr	r3, [pc, #560]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003754:	d10b      	bne.n	800376e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003756:	4b89      	ldr	r3, [pc, #548]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d06c      	beq.n	800383c <HAL_RCC_OscConfig+0x12c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d168      	bne.n	800383c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e24c      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x76>
 8003778:	4b80      	ldr	r3, [pc, #512]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7f      	ldr	r2, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e02e      	b.n	80037e4 <HAL_RCC_OscConfig+0xd4>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x98>
 800378e:	4b7b      	ldr	r3, [pc, #492]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7a      	ldr	r2, [pc, #488]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b78      	ldr	r3, [pc, #480]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a77      	ldr	r2, [pc, #476]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e01d      	b.n	80037e4 <HAL_RCC_OscConfig+0xd4>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0xbc>
 80037b2:	4b72      	ldr	r3, [pc, #456]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a71      	ldr	r2, [pc, #452]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b6f      	ldr	r3, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xd4>
 80037cc:	4b6b      	ldr	r3, [pc, #428]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6a      	ldr	r2, [pc, #424]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b68      	ldr	r3, [pc, #416]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a67      	ldr	r2, [pc, #412]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe fff8 	bl	80027e0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fff4 	bl	80027e0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e200      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b5d      	ldr	r3, [pc, #372]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe4>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe ffe4 	bl	80027e0 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe ffe0 	bl	80027e0 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e1ec      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x10c>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d063      	beq.n	8003912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800384a:	4b4c      	ldr	r3, [pc, #304]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003856:	4b49      	ldr	r3, [pc, #292]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b08      	cmp	r3, #8
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x18c>
 8003862:	4b46      	ldr	r3, [pc, #280]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x176>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1c0      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b3d      	ldr	r3, [pc, #244]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4939      	ldr	r1, [pc, #228]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	e03a      	b.n	8003912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe ff99 	bl	80027e0 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fe ff95 	bl	80027e0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e1a1      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	4b2d      	ldr	r3, [pc, #180]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4927      	ldr	r1, [pc, #156]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b26      	ldr	r3, [pc, #152]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe ff78 	bl	80027e0 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe ff74 	bl	80027e0 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e180      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d03a      	beq.n	8003994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d019      	beq.n	800395a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392c:	f7fe ff58 	bl	80027e0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003934:	f7fe ff54 	bl	80027e0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e160      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003952:	2001      	movs	r0, #1
 8003954:	f000 face 	bl	8003ef4 <RCC_Delay>
 8003958:	e01c      	b.n	8003994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003960:	f7fe ff3e 	bl	80027e0 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003966:	e00f      	b.n	8003988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003968:	f7fe ff3a 	bl	80027e0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d908      	bls.n	8003988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e146      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	42420000 	.word	0x42420000
 8003984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	4b92      	ldr	r3, [pc, #584]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e9      	bne.n	8003968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a6 	beq.w	8003aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b8b      	ldr	r3, [pc, #556]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4b88      	ldr	r3, [pc, #544]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4a87      	ldr	r2, [pc, #540]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	61d3      	str	r3, [r2, #28]
 80039be:	4b85      	ldr	r3, [pc, #532]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b82      	ldr	r3, [pc, #520]	; (8003bd8 <HAL_RCC_OscConfig+0x4c8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039da:	4b7f      	ldr	r3, [pc, #508]	; (8003bd8 <HAL_RCC_OscConfig+0x4c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <HAL_RCC_OscConfig+0x4c8>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e6:	f7fe fefb 	bl	80027e0 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fe fef7 	bl	80027e0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b64      	cmp	r3, #100	; 0x64
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e103      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b75      	ldr	r3, [pc, #468]	; (8003bd8 <HAL_RCC_OscConfig+0x4c8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x312>
 8003a14:	4b6f      	ldr	r3, [pc, #444]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4a6e      	ldr	r2, [pc, #440]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	e02d      	b.n	8003a7e <HAL_RCC_OscConfig+0x36e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x334>
 8003a2a:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a69      	ldr	r2, [pc, #420]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6213      	str	r3, [r2, #32]
 8003a36:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a66      	ldr	r2, [pc, #408]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6213      	str	r3, [r2, #32]
 8003a42:	e01c      	b.n	8003a7e <HAL_RCC_OscConfig+0x36e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b05      	cmp	r3, #5
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x356>
 8003a4c:	4b61      	ldr	r3, [pc, #388]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4a60      	ldr	r2, [pc, #384]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	4b5e      	ldr	r3, [pc, #376]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a5d      	ldr	r2, [pc, #372]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	e00b      	b.n	8003a7e <HAL_RCC_OscConfig+0x36e>
 8003a66:	4b5b      	ldr	r3, [pc, #364]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a5a      	ldr	r2, [pc, #360]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6213      	str	r3, [r2, #32]
 8003a72:	4b58      	ldr	r3, [pc, #352]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a57      	ldr	r2, [pc, #348]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d015      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a86:	f7fe feab 	bl	80027e0 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe fea7 	bl	80027e0 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0b1      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ee      	beq.n	8003a8e <HAL_RCC_OscConfig+0x37e>
 8003ab0:	e014      	b.n	8003adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab2:	f7fe fe95 	bl	80027e0 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fe fe91 	bl	80027e0 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e09b      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad0:	4b40      	ldr	r3, [pc, #256]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1ee      	bne.n	8003aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae2:	4b3c      	ldr	r3, [pc, #240]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8087 	beq.w	8003c06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d061      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d146      	bne.n	8003b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0c:	4b33      	ldr	r3, [pc, #204]	; (8003bdc <HAL_RCC_OscConfig+0x4cc>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe fe65 	bl	80027e0 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fe fe61 	bl	80027e0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e06d      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b40:	d108      	bne.n	8003b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4921      	ldr	r1, [pc, #132]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b54:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a19      	ldr	r1, [r3, #32]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	430b      	orrs	r3, r1
 8003b66:	491b      	ldr	r1, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x4cc>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fe35 	bl	80027e0 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe fe31 	bl	80027e0 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e03d      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x46a>
 8003b98:	e035      	b.n	8003c06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <HAL_RCC_OscConfig+0x4cc>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fe1e 	bl	80027e0 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fe fe1a 	bl	80027e0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e026      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x498>
 8003bc6:	e01e      	b.n	8003c06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e019      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_OscConfig+0x500>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000

08003c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0d0      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d910      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b67      	ldr	r3, [pc, #412]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 0207 	bic.w	r2, r3, #7
 8003c3e:	4965      	ldr	r1, [pc, #404]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d040      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d115      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e073      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e06b      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f023 0203 	bic.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4936      	ldr	r1, [pc, #216]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fd6c 	bl	80027e0 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0c:	f7fe fd68 	bl	80027e0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e053      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 020c 	and.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d1eb      	bne.n	8003d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d34:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d210      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 0207 	bic.w	r2, r3, #7
 8003d4a:	4922      	ldr	r1, [pc, #136]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1cc>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x1d0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fcca 	bl	800275c <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40022000 	.word	0x40022000
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	080048cc 	.word	0x080048cc
 8003de0:	20000034 	.word	0x20000034
 8003de4:	20000038 	.word	0x20000038

08003de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x30>
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x36>
 8003e16:	e027      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e1a:	613b      	str	r3, [r7, #16]
      break;
 8003e1c:	e027      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	0c9b      	lsrs	r3, r3, #18
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e28:	5cd3      	ldrb	r3, [r2, r3]
 8003e2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0c5b      	lsrs	r3, r3, #17
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	4a11      	ldr	r2, [pc, #68]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e4a:	fb03 f202 	mul.w	r2, r3, r2
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e004      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	613b      	str	r3, [r7, #16]
      break;
 8003e66:	e002      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e6a:	613b      	str	r3, [r7, #16]
      break;
 8003e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6e:	693b      	ldr	r3, [r7, #16]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	007a1200 	.word	0x007a1200
 8003e84:	080048e4 	.word	0x080048e4
 8003e88:	080048f4 	.word	0x080048f4
 8003e8c:	003d0900 	.word	0x003d0900

08003e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	20000034 	.word	0x20000034

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ea8:	f7ff fff2 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	080048dc 	.word	0x080048dc

08003ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ed0:	f7ff ffde 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	0adb      	lsrs	r3, r3, #11
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4903      	ldr	r1, [pc, #12]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	080048dc 	.word	0x080048dc

08003ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <RCC_Delay+0x34>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <RCC_Delay+0x38>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	0a5b      	lsrs	r3, r3, #9
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f10:	bf00      	nop
  }
  while (Delay --);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1e5a      	subs	r2, r3, #1
 8003f16:	60fa      	str	r2, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f9      	bne.n	8003f10 <RCC_Delay+0x1c>
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	20000034 	.word	0x20000034
 8003f2c:	10624dd3 	.word	0x10624dd3

08003f30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	f200 808a 	bhi.w	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d045      	beq.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d075      	beq.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003f66:	e082      	b.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003f68:	4b46      	ldr	r3, [pc, #280]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003f6e:	4b45      	ldr	r3, [pc, #276]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d07b      	beq.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	0c9b      	lsrs	r3, r3, #18
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	4a41      	ldr	r2, [pc, #260]	; (8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003f84:	5cd3      	ldrb	r3, [r2, r3]
 8003f86:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d015      	beq.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f92:	4b3c      	ldr	r3, [pc, #240]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	0c5b      	lsrs	r3, r3, #17
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	4a3b      	ldr	r2, [pc, #236]	; (800408c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003f9e:	5cd3      	ldrb	r3, [r2, r3]
 8003fa0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003fac:	4a38      	ldr	r2, [pc, #224]	; (8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	e004      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4a34      	ldr	r2, [pc, #208]	; (8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003fc8:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd4:	d102      	bne.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	61bb      	str	r3, [r7, #24]
      break;
 8003fda:	e04a      	b.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4a2d      	ldr	r2, [pc, #180]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	61bb      	str	r3, [r7, #24]
      break;
 8003fea:	e042      	b.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffc:	d108      	bne.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e01f      	b.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401a:	d109      	bne.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800401c:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004028:	f649 4340 	movw	r3, #40000	; 0x9c40
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e00f      	b.n	8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800403a:	d11c      	bne.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800403c:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d016      	beq.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004048:	f24f 4324 	movw	r3, #62500	; 0xf424
 800404c:	61bb      	str	r3, [r7, #24]
      break;
 800404e:	e012      	b.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004050:	e011      	b.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004052:	f7ff ff3b 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 8004056:	4602      	mov	r2, r0
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0b9b      	lsrs	r3, r3, #14
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	61bb      	str	r3, [r7, #24]
      break;
 800406c:	e004      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800406e:	bf00      	nop
 8004070:	e002      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004076:	bf00      	nop
    }
  }
  return (frequency);
 8004078:	69bb      	ldr	r3, [r7, #24]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	080048f8 	.word	0x080048f8
 800408c:	08004908 	.word	0x08004908
 8004090:	007a1200 	.word	0x007a1200
 8004094:	003d0900 	.word	0x003d0900
 8004098:	aaaaaaab 	.word	0xaaaaaaab

0800409c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e042      	b.n	8004134 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fac2 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	; 0x24
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f91d 	bl	8004320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	d16d      	bne.n	8004238 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_UART_Transmit+0x2c>
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e066      	b.n	800423a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2221      	movs	r2, #33	; 0x21
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800417a:	f7fe fb31 	bl	80027e0 <HAL_GetTick>
 800417e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	88fa      	ldrh	r2, [r7, #6]
 800418a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d108      	bne.n	80041a8 <HAL_UART_Transmit+0x6c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e003      	b.n	80041b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041b0:	e02a      	b.n	8004208 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2180      	movs	r1, #128	; 0x80
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f840 	bl	8004242 <UART_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e036      	b.n	800423a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	3302      	adds	r3, #2
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	e007      	b.n	80041fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3301      	adds	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1cf      	bne.n	80041b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	2140      	movs	r1, #64	; 0x40
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f810 	bl	8004242 <UART_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e006      	b.n	800423a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	e000      	b.n	800423a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004238:	2302      	movs	r3, #2
  }
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b090      	sub	sp, #64	; 0x40
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004252:	e050      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d04c      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800425c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <UART_WaitOnFlagUntilTimeout+0x30>
 8004262:	f7fe fabd 	bl	80027e0 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800426e:	429a      	cmp	r2, r3
 8004270:	d241      	bcs.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004292:	637a      	str	r2, [r7, #52]	; 0x34
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	613b      	str	r3, [r7, #16]
   return(result);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3314      	adds	r3, #20
 80042c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c6:	623a      	str	r2, [r7, #32]
 80042c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	69f9      	ldr	r1, [r7, #28]
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e5      	bne.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e00f      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	429a      	cmp	r2, r3
 8004312:	d09f      	beq.n	8004254 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3740      	adds	r7, #64	; 0x40
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800435a:	f023 030c 	bic.w	r3, r3, #12
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	430b      	orrs	r3, r1
 8004366:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2c      	ldr	r2, [pc, #176]	; (8004434 <UART_SetConfig+0x114>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d103      	bne.n	8004390 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004388:	f7ff fda0 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	e002      	b.n	8004396 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004390:	f7ff fd88 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8004394:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009a      	lsls	r2, r3, #2
 80043a0:	441a      	add	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	4a22      	ldr	r2, [pc, #136]	; (8004438 <UART_SetConfig+0x118>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	0119      	lsls	r1, r3, #4
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009a      	lsls	r2, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043cc:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <UART_SetConfig+0x118>)
 80043ce:	fba3 0302 	umull	r0, r3, r3, r2
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2064      	movs	r0, #100	; 0x64
 80043d6:	fb00 f303 	mul.w	r3, r0, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	3332      	adds	r3, #50	; 0x32
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <UART_SetConfig+0x118>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ec:	4419      	add	r1, r3
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009a      	lsls	r2, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fbb2 f2f3 	udiv	r2, r2, r3
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <UART_SetConfig+0x118>)
 8004406:	fba3 0302 	umull	r0, r3, r3, r2
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2064      	movs	r0, #100	; 0x64
 800440e:	fb00 f303 	mul.w	r3, r0, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	3332      	adds	r3, #50	; 0x32
 8004418:	4a07      	ldr	r2, [pc, #28]	; (8004438 <UART_SetConfig+0x118>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	f003 020f 	and.w	r2, r3, #15
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	440a      	add	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800442c:	bf00      	nop
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40013800 	.word	0x40013800
 8004438:	51eb851f 	.word	0x51eb851f

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	2600      	movs	r6, #0
 8004440:	4d0c      	ldr	r5, [pc, #48]	; (8004474 <__libc_init_array+0x38>)
 8004442:	4c0d      	ldr	r4, [pc, #52]	; (8004478 <__libc_init_array+0x3c>)
 8004444:	1b64      	subs	r4, r4, r5
 8004446:	10a4      	asrs	r4, r4, #2
 8004448:	42a6      	cmp	r6, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	f000 f822 	bl	8004494 <_init>
 8004450:	2600      	movs	r6, #0
 8004452:	4d0a      	ldr	r5, [pc, #40]	; (800447c <__libc_init_array+0x40>)
 8004454:	4c0a      	ldr	r4, [pc, #40]	; (8004480 <__libc_init_array+0x44>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	42a6      	cmp	r6, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f855 3b04 	ldr.w	r3, [r5], #4
 8004464:	4798      	blx	r3
 8004466:	3601      	adds	r6, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	f855 3b04 	ldr.w	r3, [r5], #4
 800446e:	4798      	blx	r3
 8004470:	3601      	adds	r6, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	0800490c 	.word	0x0800490c
 8004478:	0800490c 	.word	0x0800490c
 800447c:	0800490c 	.word	0x0800490c
 8004480:	08004910 	.word	0x08004910

08004484 <memset>:
 8004484:	4603      	mov	r3, r0
 8004486:	4402      	add	r2, r0
 8004488:	4293      	cmp	r3, r2
 800448a:	d100      	bne.n	800448e <memset+0xa>
 800448c:	4770      	bx	lr
 800448e:	f803 1b01 	strb.w	r1, [r3], #1
 8004492:	e7f9      	b.n	8004488 <memset+0x4>

08004494 <_init>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	bf00      	nop
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr

080044a0 <_fini>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	bf00      	nop
 80044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a6:	bc08      	pop	{r3}
 80044a8:	469e      	mov	lr, r3
 80044aa:	4770      	bx	lr
